//---------------------------------------------------
//
// Jeff Phillips | Derek Bamford
// CS-330 Computer Graphics and Visualization
// Project One
//
//---------------------------------------------------

#include<glad/glad.h>
#include<GLFW/glfw3.h>

#include "shader.h"
#include "Camera.h"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#include<iostream>

void framebuffer_size_callback(GLFWwindow* window, int WIDTH, int HEIGHT);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow* window);

const unsigned int WIDTH = 800; // Sets the window witdth
const unsigned int HEIGHT = 600; // Sets the window height
float MovementSpeed = 5.0f;

// camera
Camera camera(glm::vec3(0.0f, 1.5f, 4.0f)); //sets the camera location
float lastX = WIDTH / 2.0f;
float lastY = HEIGHT / 2.0f;
bool firstMouse = true;

//sets the perspective
bool perspective = false; // Sets perspective bool variable

// timing
float deltaTime = 0.0f;	// time between current frame and last frame
float lastFrame = 0.0f;

//Sets the location of the cubes at point of the light source
glm::vec3 pointLightPositions[] = {

	glm::vec3(2.0f, 2.0f, -14.0f), // Key light location [0] center right
	glm::vec3(-2.0f, 2.0f, -14.0f), // Key light location [1] center left
	glm::vec3(-8.0f, 2.0f, -14.0f), // Key light location [2] far left
	glm::vec3(8.0f, 2.0f, -14.0f), // Key light location [3] far right
};

// Changes the color of the light source
// Color used is called "Wheat" it allows for a softer white light that better replicates the intial photo.
// I found an all white source was too harsh and washed out the scene
glm::vec3 pointLightColors[] = {
	glm::vec3(0.961f, 0.871f, 0.702f), //white  set intensity to 10%
	glm::vec3(0.961f, 0.871f, 0.702f), //white  set intensity to 10%
	glm::vec3(0.961f, 0.871f, 0.702f), //white  set intensity to 100%
	glm::vec3(0.961f, 0.871f, 0.702f), //white  set intensity to 100%

};

int main()
{
	glfwInit(); //initializes GLFW

	//Tells GLFW what version of OpenGL we are using 
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);

	//Tells GLFW which OpenGL profile to use (package of functions)
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

	//Builds a window (Width, Height, Title, Full screen, <reasons>)
	GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "Project One_Bamford", NULL, NULL);

	//error checking for window
	if (window == NULL)
	{
		std::cout << "Failed to creat GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}

	//Tells GLFW we would like to use the window we just created, because it is stupid
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSetCursorPosCallback(window, mouse_callback);
	glfwSetScrollCallback(window, scroll_callback);

	// tell GLFW to capture our mouse
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	//allows OpenGl to account for the depth of the container
	glEnable(GL_DEPTH_TEST);

	Shader lightingShader("2.2.basic_lighting.vs", "2.2.basic_lighting.fs");
	std::cout << glGetError() << std::endl; // returns 0 (no error)

	//Vertex and Normals from learnopengl.com
	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +    Ribik's Cube Mesh       +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	GLfloat cubeVertices[] = {

		// positions          // normals           // texture coords
		-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,
		 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  0.0f,
		 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  1.0f,
		 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  1.0f,  1.0f,
		-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  1.0f,
		-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f,  0.0f,  0.0f,

		-0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,
		 0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  0.0f,
		 0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  1.0f,
		 0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  1.0f,  1.0f,
		-0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  1.0f,
		-0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f,  0.0f,  0.0f,

		-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
		-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  1.0f,
		-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
		-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f,  1.0f,  0.0f,

		 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  0.0f,
		 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  1.0f,
		 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  1.0f,
		 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  0.0f,  0.0f,
		 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f,  1.0f,  0.0f,

		-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  1.0f,
		 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  1.0f,
		 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,
		 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  1.0f,  0.0f,
		-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  0.0f,
		-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f,  0.0f,  1.0f,

		-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f,
		 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  1.0f,
		 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,
		 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  1.0f,  0.0f,
		-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  0.0f,
		-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f,  0.0f,  1.0f
	};

	// Normals calculated using cross-product and Normals caluculation
	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +      Countertop Mesh       +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	GLfloat tableVertices[] = {
		// positions			// Normals			texture
		-2.0f,  -1.0f, -2.0f,	0.0f, -1.0f, 0.0f,	0.0f, 0.0f,
		 2.0f,  -1.0f, -2.0f,	0.0f, -1.0f, 0.0f,	1.0f, 0.0f,
		 2.0f,  -1.0f,  2.0f,	0.0f, -1.0f, 0.0f,	1.0f, 1.0f,
		 2.0f,  -1.0f,  2.0f,	0.0f, -1.0f, 0.0f,	1.0f, 0.0f,
		-2.0f,  -1.0f,  2.0f,	0.0f, -1.0f, 0.0f,	0.0f, 0.0f,
		-2.0f,  -1.0f, -2.0f,	0.0f, -1.0f, 0.0f,	0.0f, 1.0f,
	};

	unsigned int tableIndices[] = {
	   0, 1, 2,   // first triangle
	   3, 4, 5,
	   6
	};

	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +       Computer Mesh        +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	GLfloat computerVertices[] = {
		// positions               Normals           texture
		 0.5f,  0.5f, 0.0f,   0.0f, 0.0f, -1.0f,   1.0f, 1.0f, // top right
		 0.5f, -0.5f, 0.0f,   0.0f, 0.0f, -1.0f,   1.0f, 0.0f, // bottom right
		-0.5f, -0.5f, 0.0f,   0.0f, 0.0f, -1.0f,   0.0f, 0.0f, // bottom left
		-0.5f,  0.5f, 0.0f,   0.0f, 0.0f, -1.0f,   0.0f, 1.0f  // top left 
	};

	unsigned int computerIndices[] = {
		0, 1, 3, // first triangle
		1, 2, 3  // second triangle
	};

		GLfloat pyramidVertices[] = {

	// Coordinates		 /       Normals		/     TexCoord
	-0.5f,  0.0f,  0.5f,	0.0f, -1.0f, 0.0f,		0.0f, 0.0f,//left face
	-0.5f,  0.0f, -0.5f,	0.0f, -1.0f, 0.0f,		0.0f, 1.0f, //left face
	 0.5f,  0.0f, -0.5f,    0.0f, -1.0f, 0.0f,		1.0f, 1.0f, //bottom face
	 0.5f,  0.0f,  0.5f,	0.0f, -1.0f, 0.0f,		1.0f, 0.0f, //front face

	 -0.5f,  0.0f,  0.5f,	-0.8f, 0.5f, 0.0f,		0.0f, 0.0f,//left face
	 -0.5f,  0.0f, -0.5f,	-0.8f, 0.5f, 0.0f,		1.0f, 0.0f, //left face
	  0.0f,  0.8f,  0.0f,	-0.8f, 0.5f, 0.0f,		0.5f, 1.0f,

	 -0.5f,  0.0f, -0.5f,    0.0f,  0.5f, -0.8f,	1.0f, 0.0f, //bottom face
	  0.5f,  0.0f, -0.5f,	 0.0f,  0.5f, -0.8f,	0.0f, 0.0f, //front face
	  0.0f,  0.8f,  0.0f,	 0.0f,  0.5f, -0.8f,	0.5f, 1.0f,

     0.5f,  0.0f, -0.5f,    0.8f,  0.5f, 0.0f,		0.0f, 0.0f, //bottom face
	 0.5f,  0.0f,  0.5f,	0.8f,  0.5f, 0.0f,		1.0f, 0.0f, //front face
	 0.0f,  0.8f,  0.0f,	0.8f,  0.5f, 0.0f,		0.5f, 1.0f,

	  0.5f,  0.0f,  0.5f,   0.0f, 0.5f, 0.8f,		1.0f, 0.0f, //bottom face
	 -0.5f,  0.0f,  0.5f,	0.0f, 0.5f, 0.8f,		0.0f, 0.0f, //front face
	  0.0f,  0.8f,  0.0f,	0.0f, 0.5f, 0.8f,		0.5f, 1.0f,
	};

	unsigned int pyramidIndices[] = {
		0, 1, 2, // Bottom side
		0, 2, 3, // Bottom side
		4, 6, 5, // Left side
		7, 9, 8, // Non-facing side
		10, 12, 11, // Right side
		13, 15, 14 // Facing side
	};

	GLfloat mugVertices[] = {

		// Position // Normal // Texcoord
		0.442f, -1.000f, -0.897f,0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.556f, -1.000f, 0.831f,0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		-0.998f, -1.000f, 0.065f,0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.442f, 1.000f, -0.897f,0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.556f, 1.000f, 0.831f,0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		0.998f, 1.000f, 0.065f,	1.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		1.000f, -1.000f, 0.000f,0.999f, -0.000f, -0.033f, 0.875f, 0.875f,
		0.998f, 1.000f, -0.065f,0.999f, -0.000f, -0.033f, 0.850f, 0.125f,
		1.000f, 1.000f, 0.000f,0.999f, -0.000f, -0.033f, 0.875f, 0.125f,
		0.998f, -1.000f, -0.065f,0.995f, -0.000f, -0.098f, 0.850f, 0.875f,
		0.991f, 1.000f, -0.131f,0.995f, -0.000f, -0.098f, 0.826f, 0.125f,
		0.998f, 1.000f, -0.065f,0.995f, -0.000f, -0.098f, 0.850f, 0.125f,
		0.991f, -1.000f, -0.131f,0.987f, -0.000f, -0.163f, 0.826f, 0.875f,
		0.981f, 1.000f, -0.195f,0.987f, -0.000f, -0.163f, 0.802f, 0.125f,
		0.991f, 1.000f, -0.131f,0.987f, -0.000f, -0.163f, 0.826f, 0.125f,
		0.981f, -1.000f, -0.195f,0.974f, -0.000f, -0.227f, 0.802f, 0.875f,
		0.966f, 1.000f, -0.259f,0.974f, -0.000f, -0.227f, 0.778f, 0.125f,
		0.981f, 1.000f, -0.195f,0.974f, -0.000f, -0.227f, 0.802f, 0.125f,
		0.966f, -1.000f, -0.259f, 0.957f, -0.000f, -0.290f, 0.778f, 0.875f,
		0.947f, 1.000f, -0.321f, 0.957f, -0.000f, -0.290f, 0.754f, 0.125f,
		0.966f, 1.000f, -0.259f, 0.957f, -0.000f, -0.290f, 0.778f, 0.125f,
		0.947f, -1.000f, -0.321f, 0.936f, -0.000f, -0.352f, 0.754f, 0.875f,
		0.924f, 1.000f, -0.383f, 0.936f, -0.000f, -0.352f, 0.731f, 0.125f,
		0.947f, 1.000f, -0.321f, 0.936f, -0.000f, -0.352f, 0.754f, 0.125f,
		0.924f, -1.000f, -0.383f, 0.911f, -0.000f, -0.413f, 0.731f, 0.875f,
		0.897f, 1.000f, -0.442f, 0.911f, -0.000f, -0.413f, 0.709f, 0.125f,
		0.924f, 1.000f, -0.383f, 0.911f, -0.000f, -0.413f, 0.731f, 0.125f,
		0.897f, -1.000f, -0.442f, 0.882f, -0.000f, -0.471f, 0.709f, 0.875f,
		0.866f, 1.000f, -0.500f, 0.882f, -0.000f, -0.471f, 0.688f, 0.125f,
		0.897f, 1.000f, -0.442f, 0.882f, -0.000f, -0.471f, 0.709f, 0.125f,
		0.866f, -1.000f, -0.500f, 0.849f, -0.000f, -0.528f, 0.688f, 0.875f,
		0.831f, 1.000f, -0.556f, 0.849f, -0.000f, -0.528f, 0.667f, 0.125f,
		0.866f, 1.000f, -0.500f, 0.849f, -0.000f, -0.528f, 0.688f, 0.125f,
		0.831f, -1.000f, -0.556f, 0.813f, -0.000f, -0.582f, 0.667f, 0.875f,
		0.793f, 1.000f, -0.609f, 0.813f, -0.000f, -0.582f, 0.647f, 0.125f,
		0.831f, 1.000f, -0.556f, 0.813f, -0.000f, -0.582f, 0.667f, 0.125f,
		0.793f, -1.000f, -0.609f, 0.773f, -0.000f, -0.634f, 0.647f, 0.875f,
		0.752f, 1.000f, -0.659f, 0.773f, -0.000f, -0.634f, 0.628f, 0.125f,
		0.793f, 1.000f, -0.609f, 0.773f, -0.000f, -0.634f, 0.647f, 0.125f,
		0.752f, -1.000f, -0.659f, 0.730f, -0.000f, -0.684f, 0.628f, 0.875f,
		0.707f, 1.000f, -0.707f, 0.730f, -0.000f, -0.684f, 0.500f, 0.125f,
		0.752f, 1.000f, -0.659f, 0.730f, -0.000f, -0.684f, 0.628f, 0.125f,
		0.707f, -1.000f, -0.707f, 0.684f, -0.000f, -0.730f, 0.500f, 0.875f,
		0.659f, 1.000f, -0.752f, 0.684f, -0.000f, -0.730f, 0.372f, 0.125f,
		0.707f, 1.000f, -0.707f, 0.684f, -0.000f, -0.730f, 0.500f, 0.125f,
		0.659f, -1.000f, -0.752f, 0.634f, -0.000f, -0.773f, 0.372f, 0.875f,
		0.609f, 1.000f, -0.793f, 0.634f, -0.000f, -0.773f, 0.353f, 0.125f,
		0.659f, 1.000f, -0.752f, 0.634f, -0.000f, -0.773f, 0.372f, 0.125f,
		0.609f, -1.000f, -0.793f, 0.582f, -0.000f, -0.813f, 0.353f, 0.875f,
		0.556f, 1.000f, -0.831f, 0.582f, -0.000f, -0.813f, 0.333f, 0.125f,
		0.609f, 1.000f, -0.793f, 0.582f, -0.000f, -0.813f, 0.353f, 0.125f,
		0.556f, -1.000f, -0.831f, 0.528f, -0.000f, -0.849f, 0.333f, 0.875f,
		0.500f, 1.000f, -0.866f, 0.528f, -0.000f, -0.849f, 0.312f, 0.125f,
		0.556f, 1.000f, -0.831f, 0.528f, -0.000f, -0.849f, 0.333f, 0.125f,
		0.500f, -1.000f, -0.866f, 0.471f, -0.000f, -0.882f, 0.312f, 0.875f,
		0.442f, 1.000f, -0.897f, 0.471f, -0.000f, -0.882f, 0.291f, 0.125f,
		0.500f, 1.000f, -0.866f, 0.471f, -0.000f, -0.882f, 0.312f, 0.125f,
		0.442f, -1.000f, -0.897f, 0.413f, -0.000f, -0.911f, 0.291f, 0.875f,
		0.383f, 1.000f, -0.924f, 0.413f, -0.000f, -0.911f, 0.269f, 0.125f,
		0.442f, 1.000f, -0.897f, 0.413f, -0.000f, -0.911f, 0.291f, 0.125f,
		0.383f, -1.000f, -0.924f, 0.352f, -0.000f, -0.936f, 0.269f, 0.875f,
		0.321f, 1.000f, -0.947f, 0.352f, -0.000f, -0.936f, 0.246f, 0.125f,
		0.383f, 1.000f, -0.924f, 0.352f, -0.000f, -0.936f, 0.269f, 0.125f,
		0.321f, -1.000f, -0.947f, 0.290f, -0.000f, -0.957f, 0.246f, 0.875f,
		0.259f, 1.000f, -0.966f, 0.290f, -0.000f, -0.957f, 0.222f, 0.125f,
		0.321f, 1.000f, -0.947f, 0.290f, -0.000f, -0.957f, 0.246f, 0.125f,
		0.259f, -1.000f, -0.966f, 0.227f, -0.000f, -0.974f, 0.222f, 0.875f,
		0.195f, 1.000f, -0.981f, 0.227f, -0.000f, -0.974f, 0.198f, 0.125f,
		0.259f, 1.000f, -0.966f, 0.227f, -0.000f, -0.974f, 0.222f, 0.125f,
		0.195f, -1.000f, -0.981f, 0.163f, -0.000f, -0.987f, 0.198f, 0.875f,
		0.131f, 1.000f, -0.991f, 0.163f, -0.000f, -0.987f, 0.174f, 0.125f,
		0.195f, 1.000f, -0.981f, 0.163f, -0.000f, -0.987f, 0.198f, 0.125f,
		0.131f, -1.000f, -0.991f, 0.098f, -0.000f, -0.995f, 0.174f, 0.875f,
		0.065f, 1.000f, -0.998f, 0.098f, -0.000f, -0.995f, 0.150f, 0.125f,
		0.131f, 1.000f, -0.991f, 0.098f, -0.000f, -0.995f, 0.174f, 0.125f,
		0.065f, -1.000f, -0.998f, 0.033f, -0.000f, -0.999f, 0.150f, 0.875f,
		0.000f, 1.000f, -1.000f, 0.033f, -0.000f, -0.999f, 0.125f, 0.125f,
		0.065f, 1.000f, -0.998f, 0.033f, -0.000f, -0.999f, 0.150f, 0.125f,
		0.000f, 1.000f, 1.000f, -0.033f, -0.000f, 0.999f, 1.625f, 0.125f,
		-0.065f, -1.000f, 0.998f, -0.033f, -0.000f, 0.999f, 1.650f, 0.875f,
		0.000f, -1.000f, 1.000f, -0.033f, -0.000f, 0.999f, 1.625f, 0.875f,
		-0.065f, 1.000f, 0.998f, -0.098f, -0.000f, 0.995f, 1.650f, 0.125f,
		-0.131f, -1.000f, 0.991f, -0.098f, -0.000f, 0.995f, 1.674f, 0.875f,
		-0.065f, -1.000f, 0.998f, -0.098f, -0.000f, 0.995f, 1.650f, 0.875f,
		-0.131f, 1.000f, 0.991f, -0.163f, -0.000f, 0.987f, 1.674f, 0.125f,
		-0.195f, -1.000f, 0.981f, -0.163f, -0.000f, 0.987f, 1.698f, 0.875f,
		-0.131f, -1.000f, 0.991f, -0.163f, -0.000f, 0.987f, 1.674f, 0.875f,
		-0.195f, 1.000f, 0.981f, -0.227f, -0.000f, 0.974f, 1.698f, 0.125f,
		-0.259f, -1.000f, 0.966f, -0.227f, -0.000f, 0.974f, 1.722f, 0.875f,
		-0.195f, -1.000f, 0.981f, -0.227f, -0.000f, 0.974f, 1.698f, 0.875f,
		-0.259f, 1.000f, 0.966f, -0.290f, -0.000f, 0.957f, 1.722f, 0.125f,
		-0.321f, -1.000f, 0.947f, -0.290f, -0.000f, 0.957f, 1.746f, 0.875f,
		-0.259f, -1.000f, 0.966f, -0.290f, -0.000f, 0.957f, 1.722f, 0.875f,
		-0.321f, 1.000f, 0.947f, -0.352f, -0.000f, 0.936f, 1.746f, 0.125f,
		-0.383f, -1.000f, 0.924f, -0.352f, -0.000f, 0.936f, 1.769f, 0.875f,
		-0.321f, -1.000f, 0.947f, -0.352f, -0.000f, 0.936f, 1.746f, 0.875f,
		-0.383f, 1.000f, 0.924f, -0.413f, -0.000f, 0.911f, 1.769f, 0.125f,
		-0.442f, -1.000f, 0.897f, -0.413f, -0.000f, 0.911f, 1.791f, 0.875f,
		-0.383f, -1.000f, 0.924f, -0.413f, -0.000f, 0.911f, 1.769f, 0.875f,
		-0.442f, 1.000f, 0.897f, -0.471f, -0.000f, 0.882f, 1.791f, 0.125f,
		-0.500f, -1.000f, 0.866f, -0.471f, -0.000f, 0.882f, 1.812f, 0.875f,
		-0.442f, -1.000f, 0.897f, -0.471f, -0.000f, 0.882f, 1.791f, 0.875f,
		-0.500f, 1.000f, 0.866f, -0.528f, -0.000f, 0.849f, 1.812f, 0.125f,
		-0.556f, -1.000f, 0.831f, -0.528f, -0.000f, 0.849f, 1.833f, 0.875f,
		-0.500f, -1.000f, 0.866f, -0.528f, -0.000f, 0.849f, 1.812f, 0.875f,
		-0.556f, 1.000f, 0.831f, -0.582f, -0.000f, 0.813f, 1.833f, 0.125f,
		-0.609f, -1.000f, 0.793f, -0.582f, -0.000f, 0.813f, 1.853f, 0.875f,
		-0.556f, -1.000f, 0.831f, -0.582f, -0.000f, 0.813f, 1.833f, 0.875f,
		-0.609f, 1.000f, 0.793f, -0.634f, -0.000f, 0.773f, 1.853f, 0.125f,
		-0.659f, -1.000f, 0.752f, -0.634f, -0.000f, 0.773f, 1.872f, 0.875f,
		-0.609f, -1.000f, 0.793f, -0.634f, -0.000f, 0.773f, 1.853f, 0.875f,
		-0.659f, 1.000f, 0.752f, -0.684f, -0.000f, 0.730f, 1.872f, 0.125f,
		-0.707f, -1.000f, 0.707f, -0.684f, -0.000f, 0.730f, 2.000f, 0.875f,
		-0.659f, -1.000f, 0.752f, -0.684f, -0.000f, 0.730f, 1.872f, 0.875f,
		-0.707f, 1.000f, 0.707f, -0.730f, -0.000f, 0.684f, -1.000f, 0.125f,
		-0.752f, -1.000f, 0.659f, -0.730f, -0.000f, 0.684f, -0.872f, 0.875f,
		-0.707f, -1.000f, 0.707f, -0.730f, -0.000f, 0.684f, -1.000f, 0.875f,
		-0.752f, 1.000f, 0.659f, -0.773f, -0.000f, 0.634f, -0.872f, 0.125f,
		-0.793f, -1.000f, 0.609f, -0.773f, -0.000f, 0.634f, -0.853f, 0.875f,
		-0.752f, -1.000f, 0.659f, -0.773f, -0.000f, 0.634f, -0.872f, 0.875f,
		-0.793f, 1.000f, 0.609f, -0.813f, -0.000f, 0.582f, -0.853f, 0.125f,
		-0.831f, -1.000f, 0.556f, -0.813f, -0.000f, 0.582f, -0.833f, 0.875f,
		-0.793f, -1.000f, 0.609f, -0.813f, -0.000f, 0.582f, -0.853f, 0.875f,
		-0.831f, 1.000f, 0.556f, -0.849f, -0.000f, 0.528f, -0.833f, 0.125f,
		-0.866f, -1.000f, 0.500f, -0.849f, -0.000f, 0.528f, -0.812f, 0.875f,
		-0.831f, -1.000f, 0.556f, -0.849f, -0.000f, 0.528f, -0.833f, 0.875f,
		-0.866f, 1.000f, 0.500f, -0.882f, -0.000f, 0.471f, -0.812f, 0.125f,
		-0.897f, -1.000f, 0.442f, -0.882f, -0.000f, 0.471f, -0.791f, 0.875f,
		-0.866f, -1.000f, 0.500f, -0.882f, -0.000f, 0.471f, -0.812f, 0.875f,
		-0.897f, 1.000f, 0.442f, -0.911f, -0.000f, 0.413f, -0.791f, 0.125f,
		-0.924f, -1.000f, 0.383f, -0.911f, -0.000f, 0.413f, -0.769f, 0.875f,
		-0.897f, -1.000f, 0.442f, -0.911f, -0.000f, 0.413f, -0.791f, 0.875f,
		-0.924f, 1.000f, 0.383f, -0.936f, -0.000f, 0.352f, -0.769f, 0.125f,
		-0.947f, -1.000f, 0.321f, -0.936f, -0.000f, 0.352f, -0.746f, 0.875f,
		-0.924f, -1.000f, 0.383f, -0.936f, -0.000f, 0.352f, -0.769f, 0.875f,
		-0.947f, 1.000f, 0.321f, -0.957f, -0.000f, 0.290f, -0.746f, 0.125f,
		-0.966f, -1.000f, 0.259f, -0.957f, -0.000f, 0.290f, -0.722f, 0.875f,
		-0.947f, -1.000f, 0.321f, -0.957f, -0.000f, 0.290f, -0.746f, 0.875f,
		-0.966f, 1.000f, 0.259f, -0.974f, -0.000f, 0.227f, -0.722f, 0.125f,
		-0.981f, -1.000f, 0.195f, -0.974f, -0.000f, 0.227f, -0.698f, 0.875f,
		-0.966f, -1.000f, 0.259f, -0.974f, -0.000f, 0.227f, -0.722f, 0.875f,
		-0.981f, 1.000f, 0.195f, -0.987f, -0.000f, 0.163f, -0.698f, 0.125f,
		-0.991f, -1.000f, 0.131f, -0.987f, -0.000f, 0.163f, -0.674f, 0.875f,
		-0.981f, -1.000f, 0.195f, -0.987f, -0.000f, 0.163f, -0.698f, 0.875f,
		-0.991f, 1.000f, 0.131f, -0.995f, -0.000f, 0.098f, -0.674f, 0.125f,
		-0.998f, -1.000f, 0.065f, -0.995f, -0.000f, 0.098f, -0.650f, 0.875f,
		-0.991f, -1.000f, 0.131f, -0.995f, -0.000f, 0.098f, -0.674f, 0.875f,
		-0.998f, 1.000f, 0.065f, -0.999f, -0.000f, 0.033f, -0.650f, 0.125f,
		-1.000f, -1.000f, 0.000f, -0.999f, -0.000f, 0.033f, -0.625f, 0.875f,
		-0.998f, -1.000f, 0.065f, -0.999f, -0.000f, 0.033f, -0.650f, 0.875f,
		0.000f, -1.000f, 1.000f, 0.033f, -0.000f, 0.999f, 1.625f, 0.875f,
		0.065f, 1.000f, 0.998f, 0.033f, -0.000f, 0.999f, 1.600f, 0.125f,
		0.000f, 1.000f, 1.000f, 0.033f, -0.000f, 0.999f, 1.625f, 0.125f,
		0.065f, -1.000f, 0.998f, 0.098f, -0.000f, 0.995f, 1.600f, 0.875f,
		0.131f, 1.000f, 0.991f, 0.098f, -0.000f, 0.995f, 1.576f, 0.125f,
		0.065f, 1.000f, 0.998f, 0.098f, -0.000f, 0.995f, 1.600f, 0.125f,
		0.131f, -1.000f, 0.991f, 0.163f, -0.000f, 0.987f, 1.576f, 0.875f,
		0.195f, 1.000f, 0.981f, 0.163f, -0.000f, 0.987f, 1.552f, 0.125f,
		0.131f, 1.000f, 0.991f, 0.163f, -0.000f, 0.987f, 1.576f, 0.125f,
		0.195f, -1.000f, 0.981f, 0.227f, -0.000f, 0.974f, 1.552f, 0.875f,
		0.259f, 1.000f, 0.966f, 0.227f, -0.000f, 0.974f, 1.528f, 0.125f,
		0.195f, 1.000f, 0.981f, 0.227f, -0.000f, 0.974f, 1.552f, 0.125f,
		0.259f, -1.000f, 0.966f, 0.290f, -0.000f, 0.957f, 1.528f, 0.875f,
		0.321f, 1.000f, 0.947f, 0.290f, -0.000f, 0.957f, 1.504f, 0.125f,
		0.259f, 1.000f, 0.966f, 0.290f, -0.000f, 0.957f, 1.528f, 0.125f,
		0.321f, -1.000f, 0.947f, 0.352f, -0.000f, 0.936f, 1.504f, 0.875f,
		0.383f, 1.000f, 0.924f, 0.352f, -0.000f, 0.936f, 1.481f, 0.125f,
		0.321f, 1.000f, 0.947f, 0.352f, -0.000f, 0.936f, 1.504f, 0.125f,
		0.383f, -1.000f, 0.924f, 0.413f, -0.000f, 0.911f, 1.481f, 0.875f,
		0.442f, 1.000f, 0.897f, 0.413f, -0.000f, 0.911f, 1.459f, 0.125f,
		0.383f, 1.000f, 0.924f, 0.413f, -0.000f, 0.911f, 1.481f, 0.125f,
		0.442f, -1.000f, 0.897f, 0.471f, -0.000f, 0.882f, 1.459f, 0.875f,
		0.500f, 1.000f, 0.866f, 0.471f, -0.000f, 0.882f, 1.438f, 0.125f,
		0.442f, 1.000f, 0.897f, 0.471f, -0.000f, 0.882f, 1.459f, 0.125f,
		0.500f, -1.000f, 0.866f, 0.528f, -0.000f, 0.849f, 1.438f, 0.875f,
		0.556f, 1.000f, 0.831f, 0.528f, -0.000f, 0.849f, 1.417f, 0.125f,
		0.500f, 1.000f, 0.866f, 0.528f, -0.000f, 0.849f, 1.438f, 0.125f,
		0.556f, -1.000f, 0.831f, 0.582f, -0.000f, 0.813f, 1.417f, 0.875f,
		0.609f, 1.000f, 0.793f, 0.582f, -0.000f, 0.813f, 1.397f, 0.125f,
		0.556f, 1.000f, 0.831f, 0.582f, -0.000f, 0.813f, 1.417f, 0.125f,
		0.609f, -1.000f, 0.793f, 0.634f, -0.000f, 0.773f, 1.397f, 0.875f,
		0.659f, 1.000f, 0.752f, 0.634f, -0.000f, 0.773f, 1.378f, 0.125f,
		0.609f, 1.000f, 0.793f, 0.634f, -0.000f, 0.773f, 1.397f, 0.125f,
		0.659f, -1.000f, 0.752f, 0.684f, -0.000f, 0.730f, 1.378f, 0.875f,
		0.707f, 1.000f, 0.707f, 0.684f, -0.000f, 0.730f, 1.250f, 0.125f,
		0.659f, 1.000f, 0.752f, 0.684f, -0.000f, 0.730f, 1.378f, 0.125f,
		0.707f, -1.000f, 0.707f, 0.730f, -0.000f, 0.684f, 1.250f, 0.875f,
		0.752f, 1.000f, 0.659f, 0.730f, -0.000f, 0.684f, 1.122f, 0.125f,
		0.707f, 1.000f, 0.707f, 0.730f, -0.000f, 0.684f, 1.250f, 0.125f,
		0.752f, -1.000f, 0.659f, 0.773f, -0.000f, 0.634f, 1.122f, 0.875f,
		0.793f, 1.000f, 0.609f, 0.773f, -0.000f, 0.634f, 1.103f, 0.125f,
		0.752f, 1.000f, 0.659f, 0.773f, -0.000f, 0.634f, 1.122f, 0.125f,
		0.793f, -1.000f, 0.609f, 0.813f, -0.000f, 0.582f, 1.103f, 0.875f,
		0.831f, 1.000f, 0.556f, 0.813f, -0.000f, 0.582f, 1.083f, 0.125f,
		0.793f, 1.000f, 0.609f, 0.813f, -0.000f, 0.582f, 1.103f, 0.125f,
		0.831f, -1.000f, 0.556f, 0.849f, -0.000f, 0.528f, 1.083f, 0.875f,
		0.866f, 1.000f, 0.500f, 0.849f, -0.000f, 0.528f, 1.062f, 0.125f,
		0.831f, 1.000f, 0.556f, 0.849f, -0.000f, 0.528f, 1.083f, 0.125f,
		0.866f, -1.000f, 0.500f, 0.882f, -0.000f, 0.471f, 1.062f, 0.875f,
		0.897f, 1.000f, 0.442f, 0.882f, -0.000f, 0.471f, 1.041f, 0.125f,
		0.866f, 1.000f, 0.500f, 0.882f, -0.000f, 0.471f, 1.062f, 0.125f,
		0.897f, -1.000f, 0.442f, 0.911f, -0.000f, 0.413f, 1.041f, 0.875f,
		0.924f, 1.000f, 0.383f, 0.911f, -0.000f, 0.413f, 1.019f, 0.125f,
		0.897f, 1.000f, 0.442f, 0.911f, -0.000f, 0.413f, 1.041f, 0.125f,
		0.924f, -1.000f, 0.383f, 0.936f, -0.000f, 0.352f, 1.019f, 0.875f,
		0.947f, 1.000f, 0.321f, 0.936f, -0.000f, 0.352f, 0.996f, 0.125f,
		0.924f, 1.000f, 0.383f, 0.936f, -0.000f, 0.352f, 1.019f, 0.125f,
		0.947f, -1.000f, 0.321f, 0.957f, -0.000f, 0.290f, 0.996f, 0.875f,
		0.966f, 1.000f, 0.259f, 0.957f, -0.000f, 0.290f, 0.972f, 0.125f,
		0.947f, 1.000f, 0.321f, 0.957f, -0.000f, 0.290f, 0.996f, 0.125f,
		0.966f, -1.000f, 0.259f, 0.974f, -0.000f, 0.227f, 0.972f, 0.875f,
		0.981f, 1.000f, 0.195f, 0.974f, -0.000f, 0.227f, 0.948f, 0.125f,
		0.966f, 1.000f, 0.259f, 0.974f, -0.000f, 0.227f, 0.972f, 0.125f,
		0.981f, -1.000f, 0.195f, 0.987f, -0.000f, 0.163f, 0.948f, 0.875f,
		0.991f, 1.000f, 0.131f, 0.987f, -0.000f, 0.163f, 0.924f, 0.125f,
		0.981f, 1.000f, 0.195f, 0.987f, -0.000f, 0.163f, 0.948f, 0.125f,
		0.991f, -1.000f, 0.131f, 0.995f, -0.000f, 0.098f, 0.924f, 0.875f,
		0.998f, 1.000f, 0.065f, 0.995f, -0.000f, 0.098f, 0.900f, 0.125f,
		0.991f, 1.000f, 0.131f, 0.995f, -0.000f, 0.098f, 0.924f, 0.125f,
		0.998f, -1.000f, 0.065f, 0.999f, -0.000f, 0.033f, 0.900f, 0.875f,
		1.000f, 1.000f, 0.000f, 0.999f, -0.000f, 0.033f, 0.875f, 0.125f,
		0.998f, 1.000f, 0.065f, 0.999f, -0.000f, 0.033f, 0.900f, 0.125f,
		0.000f, -1.000f, -1.000f, -0.033f, -0.000f, -0.999f, 0.125f, 0.875f,
		-0.065f, 1.000f, -0.998f, -0.033f, -0.000f, -0.999f, 0.100f, 0.125f,
		0.000f, 1.000f, -1.000f, -0.033f, -0.000f, -0.999f, 0.125f, 0.125f,
		-0.065f, -1.000f, -0.998f, -0.098f, -0.000f, -0.995f, 0.100f, 0.875f,
		-0.131f, 1.000f, -0.991f, -0.098f, -0.000f, -0.995f, 0.076f, 0.125f,
		-0.065f, 1.000f, -0.998f, -0.098f, -0.000f, -0.995f, 0.100f, 0.125f,
		-0.131f, -1.000f, -0.991f, -0.163f, -0.000f, -0.987f, 0.076f, 0.875f,
		-0.195f, 1.000f, -0.981f, -0.163f, -0.000f, -0.987f, 0.052f, 0.125f,
		-0.131f, 1.000f, -0.991f, -0.163f, -0.000f, -0.987f, 0.076f, 0.125f,
		-0.195f, -1.000f, -0.981f, -0.227f, -0.000f, -0.974f, 0.052f, 0.875f,
		-0.259f, 1.000f, -0.966f, -0.227f, -0.000f, -0.974f, 0.028f, 0.125f,
		-0.195f, 1.000f, -0.981f, -0.227f, -0.000f, -0.974f, 0.052f, 0.125f,
		-0.259f, -1.000f, -0.966f, -0.290f, -0.000f, -0.957f, 0.028f, 0.875f,
		-0.321f, 1.000f, -0.947f, -0.290f, -0.000f, -0.957f, 0.004f, 0.125f,
		-0.259f, 1.000f, -0.966f, -0.290f, -0.000f, -0.957f, 0.028f, 0.125f,
		-0.321f, -1.000f, -0.947f, -0.352f, -0.000f, -0.936f, 0.004f, 0.875f,
		-0.383f, 1.000f, -0.924f, -0.352f, -0.000f, -0.936f, -0.019f, 0.125f,
		-0.321f, 1.000f, -0.947f, -0.352f, -0.000f, -0.936f, 0.004f, 0.125f,
		-0.383f, -1.000f, -0.924f, -0.413f, -0.000f, -0.911f, -0.019f, 0.875f,
		-0.442f, 1.000f, -0.897f, -0.413f, -0.000f, -0.911f, -0.041f, 0.125f,
		-0.383f, 1.000f, -0.924f, -0.413f, -0.000f, -0.911f, -0.019f, 0.125f,
		-0.442f, -1.000f, -0.897f, -0.471f, -0.000f, -0.882f, -0.041f, 0.875f,
		-0.500f, 1.000f, -0.866f, -0.471f, -0.000f, -0.882f, -0.062f, 0.125f,
		-0.442f, 1.000f, -0.897f, -0.471f, -0.000f, -0.882f, -0.041f, 0.125f,
		-0.500f, -1.000f, -0.866f, -0.528f, -0.000f, -0.849f, -0.062f, 0.875f,
		-0.556f, 1.000f, -0.831f, -0.528f, -0.000f, -0.849f, -0.083f, 0.125f,
		-0.500f, 1.000f, -0.866f, -0.528f, -0.000f, -0.849f, -0.062f, 0.125f,
		-0.556f, -1.000f, -0.831f, -0.582f, -0.000f, -0.813f, -0.083f, 0.875f,
		-0.609f, 1.000f, -0.793f, -0.582f, -0.000f, -0.813f, -0.103f, 0.125f,
		-0.556f, 1.000f, -0.831f, -0.582f, -0.000f, -0.813f, -0.083f, 0.125f,
		-0.609f, -1.000f, -0.793f, -0.634f, -0.000f, -0.773f, -0.103f, 0.875f,
		-0.659f, 1.000f, -0.752f, -0.634f, -0.000f, -0.773f, -0.122f, 0.125f,
		-0.609f, 1.000f, -0.793f, -0.634f, -0.000f, -0.773f, -0.103f, 0.125f,
		-0.659f, -1.000f, -0.752f, -0.684f, -0.000f, -0.730f, -0.122f, 0.875f,
		-0.707f, 1.000f, -0.707f, -0.684f, -0.000f, -0.730f, -0.250f, 0.125f,
		-0.659f, 1.000f, -0.752f, -0.684f, -0.000f, -0.730f, -0.122f, 0.125f,
		-0.707f, -1.000f, -0.707f, -0.730f, -0.000f, -0.684f, -0.250f, 0.875f,
		-0.752f, 1.000f, -0.659f, -0.730f, -0.000f, -0.684f, -0.378f, 0.125f,
		-0.707f, 1.000f, -0.707f, -0.730f, -0.000f, -0.684f, -0.250f, 0.125f,
		-0.752f, -1.000f, -0.659f, -0.773f, -0.000f, -0.634f, -0.378f, 0.875f,
		-0.793f, 1.000f, -0.609f, -0.773f, -0.000f, -0.634f, -0.397f, 0.125f,
		-0.752f, 1.000f, -0.659f, -0.773f, -0.000f, -0.634f, -0.378f, 0.125f,
		-0.793f, -1.000f, -0.609f, -0.813f, -0.000f, -0.582f, -0.397f, 0.875f,
		-0.831f, 1.000f, -0.556f, -0.813f, -0.000f, -0.582f, -0.417f, 0.125f,
		-0.793f, 1.000f, -0.609f, -0.813f, -0.000f, -0.582f, -0.397f, 0.125f,
		-0.831f, -1.000f, -0.556f, -0.849f, -0.000f, -0.528f, -0.417f, 0.875f,
		-0.866f, 1.000f, -0.500f, -0.849f, -0.000f, -0.528f, -0.438f, 0.125f,
		-0.831f, 1.000f, -0.556f, -0.849f, -0.000f, -0.528f, -0.417f, 0.125f,
		-0.866f, -1.000f, -0.500f, -0.882f, -0.000f, -0.471f, -0.438f, 0.875f,
		-0.897f, 1.000f, -0.442f, -0.882f, -0.000f, -0.471f, -0.459f, 0.125f,
		-0.866f, 1.000f, -0.500f, -0.882f, -0.000f, -0.471f, -0.438f, 0.125f,
		-0.897f, -1.000f, -0.442f, -0.911f, -0.000f, -0.413f, -0.459f, 0.875f,
		-0.924f, 1.000f, -0.383f, -0.911f, -0.000f, -0.413f, -0.481f, 0.125f,
		-0.897f, 1.000f, -0.442f, -0.911f, -0.000f, -0.413f, -0.459f, 0.125f,
		-0.924f, -1.000f, -0.383f, -0.936f, -0.000f, -0.352f, -0.481f, 0.875f,
		-0.947f, 1.000f, -0.321f, -0.936f, -0.000f, -0.352f, -0.504f, 0.125f,
		-0.924f, 1.000f, -0.383f, -0.936f, -0.000f, -0.352f, -0.481f, 0.125f,
		-0.947f, -1.000f, -0.321f, -0.957f, -0.000f, -0.290f, -0.504f, 0.875f,
		-0.966f, 1.000f, -0.259f, -0.957f, -0.000f, -0.290f, -0.528f, 0.125f,
		-0.947f, 1.000f, -0.321f, -0.957f, -0.000f, -0.290f, -0.504f, 0.125f,
		-0.966f, -1.000f, -0.259f, -0.974f, -0.000f, -0.227f, -0.528f, 0.875f,
		-0.981f, 1.000f, -0.195f, -0.974f, -0.000f, -0.227f, -0.552f, 0.125f,
		-0.966f, 1.000f, -0.259f, -0.974f, -0.000f, -0.227f, -0.528f, 0.125f,
		-0.981f, -1.000f, -0.195f, -0.987f, -0.000f, -0.163f, -0.552f, 0.875f,
		-0.991f, 1.000f, -0.131f, -0.987f, -0.000f, -0.163f, -0.576f, 0.125f,
		-0.981f, 1.000f, -0.195f, -0.987f, -0.000f, -0.163f, -0.552f, 0.125f,
		-0.991f, -1.000f, -0.131f, -0.995f, -0.000f, -0.098f, -0.576f, 0.875f,
		-0.998f, 1.000f, -0.065f, -0.995f, -0.000f, -0.098f, -0.600f, 0.125f,
		-0.991f, 1.000f, -0.131f, -0.995f, -0.000f, -0.098f, -0.576f, 0.125f,
		-0.998f, -1.000f, -0.065f, -0.999f, -0.000f, -0.033f, -0.600f, 0.875f,
		-1.000f, 1.000f, 0.000f, -0.999f, -0.000f, -0.033f, -0.625f, 0.125f,
		-0.998f, 1.000f, -0.065f, -0.999f, -0.000f, -0.033f, -0.600f, 0.125f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-1.000f, -1.000f, 0.000f, -0.000f, -1.000f, -0.000f, 0.875f, 1.625f,
		-0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 1.624f,
		-0.998f, -1.000f, -0.065f, 0.000f, -1.000f, -0.000f, 0.850f, 1.624f,
		-0.991f, -1.000f, -0.131f, 0.000f, -1.000f, -0.000f, 0.826f, 1.622f,
		-0.981f, -1.000f, -0.195f, 0.000f, -1.000f, -0.000f, 0.802f, 1.618f,
		-0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 1.618f,
		-0.966f, -1.000f, -0.259f, -0.000f, -1.000f, -0.000f, 0.778f, 1.612f,
		-0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 1.605f,
		-0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 1.605f,
		-0.924f, -1.000f, -0.383f, -0.000f, -1.000f, -0.000f, 0.731f, 1.596f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.866f, -1.000f, -0.500f, -0.000f, -1.000f, -0.000f, 0.688f, 1.575f,
		-0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 1.562f,
		-0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 1.562f,
		-0.793f, -1.000f, -0.609f, -0.000f, -1.000f, -0.000f, 0.647f, 1.548f,
		-0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 1.532f,
		-0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 1.532f,
		-0.707f, -1.000f, -0.707f, -0.000f, -1.000f, -0.000f, 0.610f, 1.515f,
		-0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.497f,
		-0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.497f,
		-0.609f, -1.000f, -0.793f, -0.000f, -1.000f, -0.000f, 0.577f, 1.478f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.500f, -1.000f, -0.866f, -0.000f, -1.000f, -0.000f, 0.550f, 1.438f,
		-0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.416f,
		-0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.416f,
		-0.383f, -1.000f, -0.924f, -0.000f, -1.000f, -0.000f, 0.529f, 1.394f,
		-0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.371f,
		-0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.371f,
		-0.259f, -1.000f, -0.966f, -0.000f, -1.000f, -0.000f, 0.513f, 1.347f,
		-0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.323f,
		-0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.323f,
		-0.131f, -1.000f, -0.991f, -0.000f, -1.000f, -0.000f, 0.503f, 1.299f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		0.000f, -1.000f, -1.000f, -0.000f, -1.000f, -0.000f, 0.500f, 1.250f,
		0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.225f,
		0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.225f,
		0.131f, -1.000f, -0.991f, -0.000f, -1.000f, -0.000f, 0.503f, 1.201f,
		0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.177f,
		0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.177f,
		0.259f, -1.000f, -0.966f, -0.000f, -1.000f, -0.000f, 0.513f, 1.153f,
		0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.129f,
		0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.129f,
		0.383f, -1.000f, -0.924f, -0.000f, -1.000f, -0.000f, 0.529f, 1.106f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.500f, -1.000f, -0.866f, -0.000f, -1.000f, -0.000f, 0.550f, 1.062f,
		0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.042f,
		0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.042f,
		0.609f, -1.000f, -0.793f, -0.000f, -1.000f, -0.000f, 0.577f, 1.022f,
		0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.003f,
		0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.003f,
		0.707f, -1.000f, -0.707f, -0.000f, -1.000f, -0.000f, 0.610f, 0.985f,
		0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 0.968f,
		0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 0.968f,
		0.793f, -1.000f, -0.609f, -0.000f, -1.000f, -0.000f, 0.647f, 0.952f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.866f, -1.000f, -0.500f, -0.000f, -1.000f, -0.000f, 0.688f, 0.925f,
		0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 0.914f,
		0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 0.914f,
		0.924f, -1.000f, -0.383f, -0.000f, -1.000f, -0.000f, 0.731f, 0.904f,
		0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 0.895f,
		0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 0.895f,
		0.966f, -1.000f, -0.259f, -0.000f, -1.000f, -0.000f, 0.778f, 0.888f,
		0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 0.882f,
		0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 0.882f,
		0.991f, -1.000f, -0.131f, -0.000f, -1.000f, -0.000f, 0.826f, 0.878f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		1.000f, -1.000f, 0.000f, -0.000f, -1.000f, -0.000f, 0.875f, 0.875f,
		0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 0.876f,
		0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 0.876f,
		0.991f, -1.000f, 0.131f, -0.000f, -1.000f, -0.000f, 0.924f, 0.878f,
		0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 0.882f,
		0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 0.882f,
		0.966f, -1.000f, 0.259f, -0.000f, -1.000f, -0.000f, 0.972f, 0.888f,
		0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 0.895f,
		0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 0.895f,
		0.924f, -1.000f, 0.383f, -0.000f, -1.000f, -0.000f, 1.019f, 0.904f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.866f, -1.000f, 0.500f, -0.000f, -1.000f, -0.000f, 1.062f, 0.925f,
		0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 0.938f,
		0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 0.938f,
		0.793f, -1.000f, 0.609f, -0.000f, -1.000f, -0.000f, 1.103f, 0.952f,
		0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 0.968f,
		0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 0.968f,
		0.707f, -1.000f, 0.707f, -0.000f, -1.000f, -0.000f, 1.140f, 0.985f,
		0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.003f,
		0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.003f,
		0.609f, -1.000f, 0.793f, -0.000f, -1.000f, -0.000f, 1.173f, 1.022f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.500f, -1.000f, 0.866f, -0.000f, -1.000f, -0.000f, 1.200f, 1.062f,
		0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.084f,
		0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.084f,
		0.383f, -1.000f, 0.924f, -0.000f, -1.000f, -0.000f, 1.221f, 1.106f,
		0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.129f,
		0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.129f,
		0.259f, -1.000f, 0.966f, -0.000f, -1.000f, -0.000f, 1.237f, 1.153f,
		0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.177f,
		0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.177f,
		0.131f, -1.000f, 0.991f, -0.000f, -1.000f, -0.000f, 1.247f, 1.201f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		0.000f, -1.000f, 1.000f, -0.000f, -1.000f, -0.000f, 1.250f, 1.250f,
		-0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.275f,
		-0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.275f,
		-0.131f, -1.000f, 0.991f, -0.000f, -1.000f, -0.000f, 1.247f, 1.299f,
		-0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.323f,
		-0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.323f,
		-0.259f, -1.000f, 0.966f, -0.000f, -1.000f, -0.000f, 1.237f, 1.347f,
		-0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.371f,
		-0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.371f,
		-0.383f, -1.000f, 0.924f, -0.000f, -1.000f, -0.000f, 1.221f, 1.394f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.500f, -1.000f, 0.866f, -0.000f, -1.000f, -0.000f, 1.200f, 1.438f,
		-0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.458f,
		-0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.458f,
		-0.609f, -1.000f, 0.793f, -0.000f, -1.000f, -0.000f, 1.173f, 1.478f,
		-0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.497f,
		-0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.497f,
		-0.707f, -1.000f, 0.707f, -0.000f, -1.000f, -0.000f, 1.140f, 1.515f,
		-0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 1.532f,
		-0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 1.532f,
		-0.793f, -1.000f, 0.609f, -0.000f, -1.000f, -0.000f, 1.103f, 1.548f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.866f, -1.000f, 0.500f, -0.000f, -1.000f, -0.000f, 1.062f, 1.575f,
		-0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 1.586f,
		-0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 1.586f,
		-0.924f, -1.000f, 0.383f, -0.000f, -1.000f, -0.000f, 1.019f, 1.596f,
		-0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 1.605f,
		-0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 1.605f,
		-0.966f, -1.000f, 0.259f, -0.000f, -1.000f, -0.000f, 0.972f, 1.612f,
		-0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 1.618f,
		-0.981f, -1.000f, 0.195f, 0.000f, -1.000f, -0.000f, 0.948f, 1.618f,
		-0.991f, -1.000f, 0.131f, 0.000f, -1.000f, -0.000f, 0.924f, 1.622f,
		-0.998f, -1.000f, 0.065f, 0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 1.624f,
		-0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 1.618f,
		-0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 1.618f,
		-0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 1.605f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 1.562f,
		-0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 1.532f,
		-0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 1.532f,
		-0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.497f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.416f,
		-0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.371f,
		-0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.371f,
		-0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.323f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.225f,
		0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.177f,
		0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.177f,
		0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.129f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.042f,
		0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.003f,
		0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.003f,
		0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 0.968f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 0.914f,
		0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 0.895f,
		0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 0.895f,
		0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 0.882f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 0.876f,
		0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 0.882f,
		0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 0.882f,
		0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 0.895f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 0.938f,
		0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 0.968f,
		0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 0.968f,
		0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.003f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.084f,
		0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.129f,
		0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.129f,
		0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.177f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		-0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.275f,
		-0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.323f,
		-0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.323f,
		-0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.371f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.458f,
		-0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.497f,
		-0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.497f,
		-0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 1.532f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 1.586f,
		-0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 1.605f,
		-0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 1.605f,
		-0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 1.618f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.981f, -1.000f, -0.195f, -0.000f, -1.000f, -0.000f, 0.802f, 1.618f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.752f, -1.000f, -0.659f, -0.000f, -1.000f, -0.000f, 0.628f, 1.532f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.321f, -1.000f, -0.947f, -0.000f, -1.000f, -0.000f, 0.520f, 1.371f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		0.195f, -1.000f, -0.981f, -0.000f, -1.000f, -0.000f, 0.507f, 1.177f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.659f, -1.000f, -0.752f, -0.000f, -1.000f, -0.000f, 0.593f, 1.003f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.947f, -1.000f, -0.321f, -0.000f, -1.000f, -0.000f, 0.754f, 0.895f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.981f, -1.000f, 0.195f, -0.000f, -1.000f, -0.000f, 0.948f, 0.882f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.752f, -1.000f, 0.659f, -0.000f, -1.000f, -0.000f, 1.122f, 0.968f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.321f, -1.000f, 0.947f, -0.000f, -1.000f, -0.000f, 1.230f, 1.129f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		-0.195f, -1.000f, 0.981f, -0.000f, -1.000f, -0.000f, 1.243f, 1.323f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.659f, -1.000f, 0.752f, -0.000f, -1.000f, -0.000f, 1.157f, 1.497f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.947f, -1.000f, 0.321f, -0.000f, -1.000f, -0.000f, 0.996f, 1.605f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.897f, -1.000f, -0.442f, -0.000f, -1.000f, -0.000f, 0.709f, 1.586f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		-0.065f, -1.000f, -0.998f, -0.000f, -1.000f, -0.000f, 0.501f, 1.275f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.831f, -1.000f, -0.556f, -0.000f, -1.000f, -0.000f, 0.667f, 0.938f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.897f, -1.000f, 0.442f, -0.000f, -1.000f, -0.000f, 1.041f, 0.914f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.065f, -1.000f, 0.998f, -0.000f, -1.000f, -0.000f, 1.249f, 1.225f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.831f, -1.000f, 0.556f, -0.000f, -1.000f, -0.000f, 1.083f, 1.562f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		-0.556f, -1.000f, -0.831f, -0.000f, -1.000f, -0.000f, 0.563f, 1.458f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.442f, -1.000f, -0.897f, -0.000f, -1.000f, -0.000f, 0.539f, 1.084f,
		0.998f, -1.000f, -0.065f, -0.000f, -1.000f, -0.000f, 0.850f, 0.876f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		0.556f, -1.000f, 0.831f, -0.000f, -1.000f, -0.000f, 1.187f, 1.042f,
		-0.442f, -1.000f, 0.897f, -0.000f, -1.000f, -0.000f, 1.211f, 1.416f,
		-0.998f, -1.000f, 0.065f, -0.000f, -1.000f, -0.000f, 0.900f, 1.624f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		1.000f, 1.000f, 0.000f, -0.000f, 1.000f, -0.000f, 0.875f, 0.125f,
		0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, 0.124f,
		0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, 0.124f,
		0.991f, 1.000f, -0.131f, -0.000f, 1.000f, -0.000f, 0.826f, 0.122f,
		0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, 0.118f,
		0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, 0.118f,
		0.966f, 1.000f, -0.259f, -0.000f, 1.000f, -0.000f, 0.778f, 0.112f,
		0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, 0.105f,
		0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, 0.105f,
		0.924f, 1.000f, -0.383f, -0.000f, 1.000f, -0.000f, 0.731f, 0.096f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.866f, 1.000f, -0.500f, -0.000f, 1.000f, -0.000f, 0.688f, 0.075f,
		0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, 0.062f,
		0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, 0.062f,
		0.793f, 1.000f, -0.609f, -0.000f, 1.000f, -0.000f, 0.647f, 0.048f,
		0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, 0.032f,
		0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, 0.032f,
		0.707f, 1.000f, -0.707f, -0.000f, 1.000f, -0.000f, 0.610f, 0.015f,
		0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.003f,
		0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.003f,
		0.609f, 1.000f, -0.793f, -0.000f, 1.000f, -0.000f, 0.577f, -0.022f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.500f, 1.000f, -0.866f, -0.000f, 1.000f, -0.000f, 0.550f, -0.062f,
		0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.084f,
		0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.084f,
		0.383f, 1.000f, -0.924f, -0.000f, 1.000f, -0.000f, 0.529f, -0.106f,
		0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.129f,
		0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.129f,
		0.259f, 1.000f, -0.966f, -0.000f, 1.000f, -0.000f, 0.513f, -0.153f,
		0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.177f,
		0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.177f,
		0.131f, 1.000f, -0.991f, -0.000f, 1.000f, -0.000f, 0.503f, -0.201f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		0.000f, 1.000f, -1.000f, -0.000f, 1.000f, -0.000f, 0.500f, -0.250f,
		-0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.275f,
		-0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.275f,
		-0.131f, 1.000f, -0.991f, -0.000f, 1.000f, -0.000f, 0.503f, -0.299f,
		-0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.323f,
		-0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.323f,
		-0.259f, 1.000f, -0.966f, -0.000f, 1.000f, -0.000f, 0.513f, -0.347f,
		-0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.371f,
		-0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.371f,
		-0.383f, 1.000f, -0.924f, -0.000f, 1.000f, -0.000f, 0.529f, -0.394f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.500f, 1.000f, -0.866f, -0.000f, 1.000f, -0.000f, 0.550f, -0.438f,
		-0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.458f,
		-0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.458f,
		-0.609f, 1.000f, -0.793f, -0.000f, 1.000f, -0.000f, 0.577f, -0.478f,
		-0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.497f,
		-0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.497f,
		-0.707f, 1.000f, -0.707f, -0.000f, 1.000f, -0.000f, 0.610f, -0.515f,
		-0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, -0.532f,
		-0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, -0.532f,
		-0.793f, 1.000f, -0.609f, -0.000f, 1.000f, -0.000f, 0.647f, -0.548f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.866f, 1.000f, -0.500f, -0.000f, 1.000f, -0.000f, 0.688f, -0.575f,
		-0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, -0.586f,
		-0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, -0.586f,
		-0.924f, 1.000f, -0.383f, -0.000f, 1.000f, -0.000f, 0.731f, -0.596f,
		-0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, -0.605f,
		-0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, -0.605f,
		-0.966f, 1.000f, -0.259f, -0.000f, 1.000f, -0.000f, 0.778f, -0.612f,
		-0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, -0.618f,
		-0.981f, 1.000f, -0.195f, 0.000f, 1.000f, -0.000f, 0.802f, -0.618f,
		-0.991f, 1.000f, -0.131f, 0.000f, 1.000f, -0.000f, 0.826f, -0.622f,
		-0.998f, 1.000f, -0.065f, 0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-1.000f, 1.000f, 0.000f, -0.000f, 1.000f, -0.000f, 0.875f, -0.625f,
		-0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, -0.624f,
		-0.998f, 1.000f, 0.065f, 0.000f, 1.000f, -0.000f, 0.900f, -0.624f,
		-0.991f, 1.000f, 0.131f, 0.000f, 1.000f, -0.000f, 0.924f, -0.622f,
		-0.981f, 1.000f, 0.195f, 0.000f, 1.000f, -0.000f, 0.948f, -0.618f,
		-0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, -0.618f,
		-0.966f, 1.000f, 0.259f, -0.000f, 1.000f, -0.000f, 0.972f, -0.612f,
		-0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, -0.605f,
		-0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, -0.605f,
		-0.924f, 1.000f, 0.383f, -0.000f, 1.000f, -0.000f, 1.019f, -0.596f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.866f, 1.000f, 0.500f, -0.000f, 1.000f, -0.000f, 1.062f, -0.575f,
		-0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, -0.562f,
		-0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, -0.562f,
		-0.793f, 1.000f, 0.609f, -0.000f, 1.000f, -0.000f, 1.103f, -0.548f,
		-0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, -0.532f,
		-0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, -0.532f,
		-0.707f, 1.000f, 0.707f, -0.000f, 1.000f, -0.000f, 1.140f, -0.515f,
		-0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.497f,
		-0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.497f,
		-0.609f, 1.000f, 0.793f, -0.000f, 1.000f, -0.000f, 1.173f, -0.478f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.500f, 1.000f, 0.866f, -0.000f, 1.000f, -0.000f, 1.200f, -0.438f,
		-0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.416f,
		-0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.416f,
		-0.383f, 1.000f, 0.924f, -0.000f, 1.000f, -0.000f, 1.221f, -0.394f,
		-0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.371f,
		-0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.371f,
		-0.259f, 1.000f, 0.966f, -0.000f, 1.000f, -0.000f, 1.237f, -0.347f,
		-0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.323f,
		-0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.323f,
		-0.131f, 1.000f, 0.991f, -0.000f, 1.000f, -0.000f, 1.247f, -0.299f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		0.000f, 1.000f, 1.000f, -0.000f, 1.000f, -0.000f, 1.250f, -0.250f,
		0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.225f,
		0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.225f,
		0.131f, 1.000f, 0.991f, -0.000f, 1.000f, -0.000f, 1.247f, -0.201f,
		0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.177f,
		0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.177f,
		0.259f, 1.000f, 0.966f, -0.000f, 1.000f, -0.000f, 1.237f, -0.153f,
		0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.129f,
		0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.129f,
		0.383f, 1.000f, 0.924f, -0.000f, 1.000f, -0.000f, 1.221f, -0.106f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.500f, 1.000f, 0.866f, -0.000f, 1.000f, -0.000f, 1.200f, -0.062f,
		0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.042f,
		0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.042f,
		0.609f, 1.000f, 0.793f, -0.000f, 1.000f, -0.000f, 1.173f, -0.022f,
		0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.003f,
		0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.003f,
		0.707f, 1.000f, 0.707f, -0.000f, 1.000f, -0.000f, 1.140f, 0.015f,
		0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, 0.032f,
		0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, 0.032f,
		0.793f, 1.000f, 0.609f, -0.000f, 1.000f, -0.000f, 1.103f, 0.048f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.866f, 1.000f, 0.500f, -0.000f, 1.000f, -0.000f, 1.062f, 0.075f,
		0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, 0.086f,
		0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, 0.086f,
		0.924f, 1.000f, 0.383f, -0.000f, 1.000f, -0.000f, 1.019f, 0.096f,
		0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, 0.105f,
		0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, 0.105f,
		0.966f, 1.000f, 0.259f, -0.000f, 1.000f, -0.000f, 0.972f, 0.112f,
		0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, 0.118f,
		0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, 0.118f,
		0.991f, 1.000f, 0.131f, -0.000f, 1.000f, -0.000f, 0.924f, 0.122f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, 0.124f,
		0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, 0.118f,
		0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, 0.118f,
		0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, 0.105f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, 0.062f,
		0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, 0.032f,
		0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, 0.032f,
		0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.003f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.084f,
		0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.129f,
		0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.129f,
		0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.177f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		-0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.275f,
		-0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.323f,
		-0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.323f,
		-0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.371f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.458f,
		-0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.497f,
		-0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.497f,
		-0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, -0.532f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, -0.586f,
		-0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, -0.605f,
		-0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, -0.605f,
		-0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, -0.618f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, -0.624f,
		-0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, -0.618f,
		-0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, -0.618f,
		-0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, -0.605f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, -0.562f,
		-0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, -0.532f,
		-0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, -0.532f,
		-0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.497f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.416f,
		-0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.371f,
		-0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.371f,
		-0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.323f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.225f,
		0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.177f,
		0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.177f,
		0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.129f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.042f,
		0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.003f,
		0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.003f,
		0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, 0.032f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, 0.086f,
		0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, 0.105f,
		0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, 0.105f,
		0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, 0.118f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.981f, 1.000f, -0.195f, -0.000f, 1.000f, -0.000f, 0.802f, 0.118f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.752f, 1.000f, -0.659f, -0.000f, 1.000f, -0.000f, 0.628f, 0.032f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.321f, 1.000f, -0.947f, -0.000f, 1.000f, -0.000f, 0.520f, -0.129f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		-0.195f, 1.000f, -0.981f, -0.000f, 1.000f, -0.000f, 0.507f, -0.323f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.659f, 1.000f, -0.752f, -0.000f, 1.000f, -0.000f, 0.593f, -0.497f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.947f, 1.000f, -0.321f, -0.000f, 1.000f, -0.000f, 0.754f, -0.605f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.981f, 1.000f, 0.195f, -0.000f, 1.000f, -0.000f, 0.948f, -0.618f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.752f, 1.000f, 0.659f, -0.000f, 1.000f, -0.000f, 1.122f, -0.532f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.321f, 1.000f, 0.947f, -0.000f, 1.000f, -0.000f, 1.230f, -0.371f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		0.195f, 1.000f, 0.981f, -0.000f, 1.000f, -0.000f, 1.243f, -0.177f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.659f, 1.000f, 0.752f, -0.000f, 1.000f, -0.000f, 1.157f, -0.003f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.947f, 1.000f, 0.321f, -0.000f, 1.000f, -0.000f, 0.996f, 0.105f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.897f, 1.000f, -0.442f, -0.000f, 1.000f, -0.000f, 0.709f, 0.086f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		0.065f, 1.000f, -0.998f, -0.000f, 1.000f, -0.000f, 0.501f, -0.225f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.831f, 1.000f, -0.556f, -0.000f, 1.000f, -0.000f, 0.667f, -0.562f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.897f, 1.000f, 0.442f, -0.000f, 1.000f, -0.000f, 1.041f, -0.586f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.065f, 1.000f, 0.998f, -0.000f, 1.000f, -0.000f, 1.249f, -0.275f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.831f, 1.000f, 0.556f, -0.000f, 1.000f, -0.000f, 1.083f, 0.062f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		0.556f, 1.000f, -0.831f, -0.000f, 1.000f, -0.000f, 0.563f, -0.042f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.442f, 1.000f, -0.897f, -0.000f, 1.000f, -0.000f, 0.539f, -0.416f,
		-0.998f, 1.000f, -0.065f, -0.000f, 1.000f, -0.000f, 0.850f, -0.624f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		-0.556f, 1.000f, 0.831f, -0.000f, 1.000f, -0.000f, 1.187f, -0.458f,
		0.442f, 1.000f, 0.897f, -0.000f, 1.000f, -0.000f, 1.211f, -0.084f,
		0.998f, 1.000f, 0.065f, -0.000f, 1.000f, -0.000f, 0.900f, 0.124f,
		1.000f, -1.000f, 0.000f, 0.999f, -0.000f, -0.033f, 0.875f, 0.875f,
		0.998f, -1.000f, -0.065f, 0.999f, -0.000f, -0.033f, 0.850f, 0.875f,
		0.998f, 1.000f, -0.065f, 0.999f, -0.000f, -0.033f, 0.850f, 0.125f,
		0.998f, -1.000f, -0.065f, 0.995f, -0.000f, -0.098f, 0.850f, 0.875f,
		0.991f, -1.000f, -0.131f, 0.995f, -0.000f, -0.098f, 0.826f, 0.875f,
		0.991f, 1.000f, -0.131f, 0.995f, -0.000f, -0.098f, 0.826f, 0.125f,
		0.991f, -1.000f, -0.131f, 0.987f, -0.000f, -0.163f, 0.826f, 0.875f,
		0.981f, -1.000f, -0.195f, 0.987f, -0.000f, -0.163f, 0.802f, 0.875f,
		0.981f, 1.000f, -0.195f, 0.987f, -0.000f, -0.163f, 0.802f, 0.125f,
		0.981f, -1.000f, -0.195f, 0.974f, -0.000f, -0.227f, 0.802f, 0.875f,
		0.966f, -1.000f, -0.259f, 0.974f, -0.000f, -0.227f, 0.778f, 0.875f,
		0.966f, 1.000f, -0.259f, 0.974f, -0.000f, -0.227f, 0.778f, 0.125f,
		0.966f, -1.000f, -0.259f, 0.957f, -0.000f, -0.290f, 0.778f, 0.875f,
		0.947f, -1.000f, -0.321f, 0.957f, -0.000f, -0.290f, 0.754f, 0.875f,
		0.947f, 1.000f, -0.321f, 0.957f, -0.000f, -0.290f, 0.754f, 0.125f,
		0.947f, -1.000f, -0.321f, 0.936f, -0.000f, -0.352f, 0.754f, 0.875f,
		0.924f, -1.000f, -0.383f, 0.936f, -0.000f, -0.352f, 0.731f, 0.875f,
		0.924f, 1.000f, -0.383f, 0.936f, -0.000f, -0.352f, 0.731f, 0.125f,
		0.924f, -1.000f, -0.383f, 0.911f, -0.000f, -0.413f, 0.731f, 0.875f,
		0.897f, -1.000f, -0.442f, 0.911f, -0.000f, -0.413f, 0.709f, 0.875f,
		0.897f, 1.000f, -0.442f, 0.911f, -0.000f, -0.413f, 0.709f, 0.125f,
		0.897f, -1.000f, -0.442f, 0.882f, -0.000f, -0.471f, 0.709f, 0.875f,
		0.866f, -1.000f, -0.500f, 0.882f, -0.000f, -0.471f, 0.688f, 0.875f,
		0.866f, 1.000f, -0.500f, 0.882f, -0.000f, -0.471f, 0.688f, 0.125f,
		0.866f, -1.000f, -0.500f, 0.849f, -0.000f, -0.528f, 0.688f, 0.875f,
		0.831f, -1.000f, -0.556f, 0.849f, -0.000f, -0.528f, 0.667f, 0.875f,
		0.831f, 1.000f, -0.556f, 0.849f, -0.000f, -0.528f, 0.667f, 0.125f,
		0.831f, -1.000f, -0.556f, 0.813f, -0.000f, -0.582f, 0.667f, 0.875f,
		0.793f, -1.000f, -0.609f, 0.813f, -0.000f, -0.582f, 0.647f, 0.875f,
		0.793f, 1.000f, -0.609f, 0.813f, -0.000f, -0.582f, 0.647f, 0.125f,
		0.793f, -1.000f, -0.609f, 0.773f, -0.000f, -0.634f, 0.647f, 0.875f,
		0.752f, -1.000f, -0.659f, 0.773f, -0.000f, -0.634f, 0.628f, 0.875f,
		0.752f, 1.000f, -0.659f, 0.773f, -0.000f, -0.634f, 0.628f, 0.125f,
		0.752f, -1.000f, -0.659f, 0.730f, -0.000f, -0.684f, 0.628f, 0.875f,
		0.707f, -1.000f, -0.707f, 0.730f, -0.000f, -0.684f, 0.500f, 0.875f,
		0.707f, 1.000f, -0.707f, 0.730f, -0.000f, -0.684f, 0.500f, 0.125f,
		0.707f, -1.000f, -0.707f, 0.684f, -0.000f, -0.730f, 0.500f, 0.875f,
		0.659f, -1.000f, -0.752f, 0.684f, -0.000f, -0.730f, 0.372f, 0.875f,
		0.659f, 1.000f, -0.752f, 0.684f, -0.000f, -0.730f, 0.372f, 0.125f,
		0.659f, -1.000f, -0.752f, 0.634f, -0.000f, -0.773f, 0.372f, 0.875f,
		0.609f, -1.000f, -0.793f, 0.634f, -0.000f, -0.773f, 0.353f, 0.875f,
		0.609f, 1.000f, -0.793f, 0.634f, -0.000f, -0.773f, 0.353f, 0.125f,
		0.609f, -1.000f, -0.793f, 0.582f, -0.000f, -0.813f, 0.353f, 0.875f,
		0.556f, -1.000f, -0.831f, 0.582f, -0.000f, -0.813f, 0.333f, 0.875f,
		0.556f, 1.000f, -0.831f, 0.582f, -0.000f, -0.813f, 0.333f, 0.125f,
		0.556f, -1.000f, -0.831f, 0.528f, -0.000f, -0.849f, 0.333f, 0.875f,
		0.500f, -1.000f, -0.866f, 0.528f, -0.000f, -0.849f, 0.312f, 0.875f,
		0.500f, 1.000f, -0.866f, 0.528f, -0.000f, -0.849f, 0.312f, 0.125f,
		0.500f, -1.000f, -0.866f, 0.471f, -0.000f, -0.882f, 0.312f, 0.875f,
		0.442f, -1.000f, -0.897f, 0.471f, -0.000f, -0.882f, 0.291f, 0.875f,
		0.442f, 1.000f, -0.897f, 0.471f, -0.000f, -0.882f, 0.291f, 0.125f,
		0.442f, -1.000f, -0.897f, 0.413f, -0.000f, -0.911f, 0.291f, 0.875f,
		0.383f, -1.000f, -0.924f, 0.413f, -0.000f, -0.911f, 0.269f, 0.875f,
		0.383f, 1.000f, -0.924f, 0.413f, -0.000f, -0.911f, 0.269f, 0.125f,
		0.383f, -1.000f, -0.924f, 0.352f, -0.000f, -0.936f, 0.269f, 0.875f,
		0.321f, -1.000f, -0.947f, 0.352f, -0.000f, -0.936f, 0.246f, 0.875f,
		0.321f, 1.000f, -0.947f, 0.352f, -0.000f, -0.936f, 0.246f, 0.125f,
		0.321f, -1.000f, -0.947f, 0.290f, -0.000f, -0.957f, 0.246f, 0.875f,
		0.259f, -1.000f, -0.966f, 0.290f, -0.000f, -0.957f, 0.222f, 0.875f,
		0.259f, 1.000f, -0.966f, 0.290f, -0.000f, -0.957f, 0.222f, 0.125f,
		0.259f, -1.000f, -0.966f, 0.227f, -0.000f, -0.974f, 0.222f, 0.875f,
		0.195f, -1.000f, -0.981f, 0.227f, -0.000f, -0.974f, 0.198f, 0.875f,
		0.195f, 1.000f, -0.981f, 0.227f, -0.000f, -0.974f, 0.198f, 0.125f,
		0.195f, -1.000f, -0.981f, 0.163f, -0.000f, -0.987f, 0.198f, 0.875f,
		0.131f, -1.000f, -0.991f, 0.163f, -0.000f, -0.987f, 0.174f, 0.875f,
		0.131f, 1.000f, -0.991f, 0.163f, -0.000f, -0.987f, 0.174f, 0.125f,
		0.131f, -1.000f, -0.991f, 0.098f, -0.000f, -0.995f, 0.174f, 0.875f,
		0.065f, -1.000f, -0.998f, 0.098f, -0.000f, -0.995f, 0.150f, 0.875f,
		0.065f, 1.000f, -0.998f, 0.098f, -0.000f, -0.995f, 0.150f, 0.125f,
		0.065f, -1.000f, -0.998f, 0.033f, -0.000f, -0.999f, 0.150f, 0.875f,
		0.000f, -1.000f, -1.000f, 0.033f, -0.000f, -0.999f, 0.125f, 0.875f,
		0.000f, 1.000f, -1.000f, 0.033f, -0.000f, -0.999f, 0.125f, 0.125f,
		0.000f, 1.000f, 1.000f, -0.033f, -0.000f, 0.999f, 1.625f, 0.125f,
		-0.065f, 1.000f, 0.998f, -0.033f, -0.000f, 0.999f, 1.650f, 0.125f,
		-0.065f, -1.000f, 0.998f, -0.033f, -0.000f, 0.999f, 1.650f, 0.875f,
		-0.065f, 1.000f, 0.998f, -0.098f, -0.000f, 0.995f, 1.650f, 0.125f,
		-0.131f, 1.000f, 0.991f, -0.098f, -0.000f, 0.995f, 1.674f, 0.125f,
		-0.131f, -1.000f, 0.991f, -0.098f, -0.000f, 0.995f, 1.674f, 0.875f,
		-0.131f, 1.000f, 0.991f, -0.163f, -0.000f, 0.987f, 1.674f, 0.125f,
		-0.195f, 1.000f, 0.981f, -0.163f, -0.000f, 0.987f, 1.698f, 0.125f,
		-0.195f, -1.000f, 0.981f, -0.163f, -0.000f, 0.987f, 1.698f, 0.875f,
		-0.195f, 1.000f, 0.981f, -0.227f, -0.000f, 0.974f, 1.698f, 0.125f,
		-0.259f, 1.000f, 0.966f, -0.227f, -0.000f, 0.974f, 1.722f, 0.125f,
		-0.259f, -1.000f, 0.966f, -0.227f, -0.000f, 0.974f, 1.722f, 0.875f,
		-0.259f, 1.000f, 0.966f, -0.290f, -0.000f, 0.957f, 1.722f, 0.125f,
		-0.321f, 1.000f, 0.947f, -0.290f, -0.000f, 0.957f, 1.746f, 0.125f,
		-0.321f, -1.000f, 0.947f, -0.290f, -0.000f, 0.957f, 1.746f, 0.875f,
		-0.321f, 1.000f, 0.947f, -0.352f, -0.000f, 0.936f, 1.746f, 0.125f,
		-0.383f, 1.000f, 0.924f, -0.352f, -0.000f, 0.936f, 1.769f, 0.125f,
		-0.383f, -1.000f, 0.924f, -0.352f, -0.000f, 0.936f, 1.769f, 0.875f,
		-0.383f, 1.000f, 0.924f, -0.413f, -0.000f, 0.911f, 1.769f, 0.125f,
		-0.442f, 1.000f, 0.897f, -0.413f, -0.000f, 0.911f, 1.791f, 0.125f,
		-0.442f, -1.000f, 0.897f, -0.413f, -0.000f, 0.911f, 1.791f, 0.875f,
		-0.442f, 1.000f, 0.897f, -0.471f, -0.000f, 0.882f, 1.791f, 0.125f,
		-0.500f, 1.000f, 0.866f, -0.471f, -0.000f, 0.882f, 1.812f, 0.125f,
		-0.500f, -1.000f, 0.866f, -0.471f, -0.000f, 0.882f, 1.812f, 0.875f,
		-0.500f, 1.000f, 0.866f, -0.528f, -0.000f, 0.849f, 1.812f, 0.125f,
		-0.556f, 1.000f, 0.831f, -0.528f, -0.000f, 0.849f, 1.833f, 0.125f,
		-0.556f, -1.000f, 0.831f, -0.528f, -0.000f, 0.849f, 1.833f, 0.875f,
		-0.556f, 1.000f, 0.831f, -0.582f, -0.000f, 0.813f, 1.833f, 0.125f,
		-0.609f, 1.000f, 0.793f, -0.582f, -0.000f, 0.813f, 1.853f, 0.125f,
		-0.609f, -1.000f, 0.793f, -0.582f, -0.000f, 0.813f, 1.853f, 0.875f,
		-0.609f, 1.000f, 0.793f, -0.634f, -0.000f, 0.773f, 1.853f, 0.125f,
		-0.659f, 1.000f, 0.752f, -0.634f, -0.000f, 0.773f, 1.872f, 0.125f,
		-0.659f, -1.000f, 0.752f, -0.634f, -0.000f, 0.773f, 1.872f, 0.875f,
		-0.659f, 1.000f, 0.752f, -0.684f, -0.000f, 0.730f, 1.872f, 0.125f,
		-0.707f, 1.000f, 0.707f, -0.684f, -0.000f, 0.730f, 2.000f, 0.125f,
		-0.707f, -1.000f, 0.707f, -0.684f, -0.000f, 0.730f, 2.000f, 0.875f,
		-0.707f, 1.000f, 0.707f, -0.730f, -0.000f, 0.684f, -1.000f, 0.125f,
		-0.752f, 1.000f, 0.659f, -0.730f, -0.000f, 0.684f, -0.872f, 0.125f,
		-0.752f, -1.000f, 0.659f, -0.730f, -0.000f, 0.684f, -0.872f, 0.875f,
		-0.752f, 1.000f, 0.659f, -0.773f, -0.000f, 0.634f, -0.872f, 0.125f,
		-0.793f, 1.000f, 0.609f, -0.773f, -0.000f, 0.634f, -0.853f, 0.125f,
		-0.793f, -1.000f, 0.609f, -0.773f, -0.000f, 0.634f, -0.853f, 0.875f,
		-0.793f, 1.000f, 0.609f, -0.813f, -0.000f, 0.582f, -0.853f, 0.125f,
		-0.831f, 1.000f, 0.556f, -0.813f, -0.000f, 0.582f, -0.833f, 0.125f,
		-0.831f, -1.000f, 0.556f, -0.813f, -0.000f, 0.582f, -0.833f, 0.875f,
		-0.831f, 1.000f, 0.556f, -0.849f, -0.000f, 0.528f, -0.833f, 0.125f,
		-0.866f, 1.000f, 0.500f, -0.849f, -0.000f, 0.528f, -0.812f, 0.125f,
		-0.866f, -1.000f, 0.500f, -0.849f, -0.000f, 0.528f, -0.812f, 0.875f,
		-0.866f, 1.000f, 0.500f, -0.882f, -0.000f, 0.471f, -0.812f, 0.125f,
		-0.897f, 1.000f, 0.442f, -0.882f, -0.000f, 0.471f, -0.791f, 0.125f,
		-0.897f, -1.000f, 0.442f, -0.882f, -0.000f, 0.471f, -0.791f, 0.875f,
		-0.897f, 1.000f, 0.442f, -0.911f, -0.000f, 0.413f, -0.791f, 0.125f,
		-0.924f, 1.000f, 0.383f, -0.911f, -0.000f, 0.413f, -0.769f, 0.125f,
		-0.924f, -1.000f, 0.383f, -0.911f, -0.000f, 0.413f, -0.769f, 0.875f,
		-0.924f, 1.000f, 0.383f, -0.936f, -0.000f, 0.352f, -0.769f, 0.125f,
		-0.947f, 1.000f, 0.321f, -0.936f, -0.000f, 0.352f, -0.746f, 0.125f,
		-0.947f, -1.000f, 0.321f, -0.936f, -0.000f, 0.352f, -0.746f, 0.875f,
		-0.947f, 1.000f, 0.321f, -0.957f, -0.000f, 0.290f, -0.746f, 0.125f,
		-0.966f, 1.000f, 0.259f, -0.957f, -0.000f, 0.290f, -0.722f, 0.125f,
		-0.966f, -1.000f, 0.259f, -0.957f, -0.000f, 0.290f, -0.722f, 0.875f,
		-0.966f, 1.000f, 0.259f, -0.974f, -0.000f, 0.227f, -0.722f, 0.125f,
		-0.981f, 1.000f, 0.195f, -0.974f, -0.000f, 0.227f, -0.698f, 0.125f,
		-0.981f, -1.000f, 0.195f, -0.974f, -0.000f, 0.227f, -0.698f, 0.875f,
		-0.981f, 1.000f, 0.195f, -0.987f, -0.000f, 0.163f, -0.698f, 0.125f,
		-0.991f, 1.000f, 0.131f, -0.987f, -0.000f, 0.163f, -0.674f, 0.125f,
		-0.991f, -1.000f, 0.131f, -0.987f, -0.000f, 0.163f, -0.674f, 0.875f,
		-0.991f, 1.000f, 0.131f, -0.995f, -0.000f, 0.098f, -0.674f, 0.125f,
		-0.998f, 1.000f, 0.065f, -0.995f, -0.000f, 0.098f, -0.650f, 0.125f,
		-0.998f, -1.000f, 0.065f, -0.995f, -0.000f, 0.098f, -0.650f, 0.875f,
		-0.998f, 1.000f, 0.065f, -0.999f, -0.000f, 0.033f, -0.650f, 0.125f,
		-1.000f, 1.000f, 0.000f, -0.999f, -0.000f, 0.033f, -0.625f, 0.125f,
		-1.000f, -1.000f, 0.000f, -0.999f, -0.000f, 0.033f, -0.625f, 0.875f,
		0.000f, -1.000f, 1.000f, 0.033f, -0.000f, 0.999f, 1.625f, 0.875f,
		0.065f, -1.000f, 0.998f, 0.033f, -0.000f, 0.999f, 1.600f, 0.875f,
		0.065f, 1.000f, 0.998f, 0.033f, -0.000f, 0.999f, 1.600f, 0.125f,
		0.065f, -1.000f, 0.998f, 0.098f, -0.000f, 0.995f, 1.600f, 0.875f,
		0.131f, -1.000f, 0.991f, 0.098f, -0.000f, 0.995f, 1.576f, 0.875f,
		0.131f, 1.000f, 0.991f, 0.098f, -0.000f, 0.995f, 1.576f, 0.125f,
		0.131f, -1.000f, 0.991f, 0.163f, -0.000f, 0.987f, 1.576f, 0.875f,
		0.195f, -1.000f, 0.981f, 0.163f, -0.000f, 0.987f, 1.552f, 0.875f,
		0.195f, 1.000f, 0.981f, 0.163f, -0.000f, 0.987f, 1.552f, 0.125f,
		0.195f, -1.000f, 0.981f, 0.227f, -0.000f, 0.974f, 1.552f, 0.875f,
		0.259f, -1.000f, 0.966f, 0.227f, -0.000f, 0.974f, 1.528f, 0.875f,
		0.259f, 1.000f, 0.966f, 0.227f, -0.000f, 0.974f, 1.528f, 0.125f,
		0.259f, -1.000f, 0.966f, 0.290f, -0.000f, 0.957f, 1.528f, 0.875f,
		0.321f, -1.000f, 0.947f, 0.290f, -0.000f, 0.957f, 1.504f, 0.875f,
		0.321f, 1.000f, 0.947f, 0.290f, -0.000f, 0.957f, 1.504f, 0.125f,
		0.321f, -1.000f, 0.947f, 0.352f, -0.000f, 0.936f, 1.504f, 0.875f,
		0.383f, -1.000f, 0.924f, 0.352f, -0.000f, 0.936f, 1.481f, 0.875f,
		0.383f, 1.000f, 0.924f, 0.352f, -0.000f, 0.936f, 1.481f, 0.125f,
		0.383f, -1.000f, 0.924f, 0.413f, -0.000f, 0.911f, 1.481f, 0.875f,
		0.442f, -1.000f, 0.897f, 0.413f, -0.000f, 0.911f, 1.459f, 0.875f,
		0.442f, 1.000f, 0.897f, 0.413f, -0.000f, 0.911f, 1.459f, 0.125f,
		0.442f, -1.000f, 0.897f, 0.471f, -0.000f, 0.882f, 1.459f, 0.875f,
		0.500f, -1.000f, 0.866f, 0.471f, -0.000f, 0.882f, 1.438f, 0.875f,
		0.500f, 1.000f, 0.866f, 0.471f, -0.000f, 0.882f, 1.438f, 0.125f,
		0.500f, -1.000f, 0.866f, 0.528f, -0.000f, 0.849f, 1.438f, 0.875f,
		0.556f, -1.000f, 0.831f, 0.528f, -0.000f, 0.849f, 1.417f, 0.875f,
		0.556f, 1.000f, 0.831f, 0.528f, -0.000f, 0.849f, 1.417f, 0.125f,
		0.556f, -1.000f, 0.831f, 0.582f, -0.000f, 0.813f, 1.417f, 0.875f,
		0.609f, -1.000f, 0.793f, 0.582f, -0.000f, 0.813f, 1.397f, 0.875f,
		0.609f, 1.000f, 0.793f, 0.582f, -0.000f, 0.813f, 1.397f, 0.125f,
		0.609f, -1.000f, 0.793f, 0.634f, -0.000f, 0.773f, 1.397f, 0.875f,
		0.659f, -1.000f, 0.752f, 0.634f, -0.000f, 0.773f, 1.378f, 0.875f,
		0.659f, 1.000f, 0.752f, 0.634f, -0.000f, 0.773f, 1.378f, 0.125f,
		0.659f, -1.000f, 0.752f, 0.684f, -0.000f, 0.730f, 1.378f, 0.875f,
		0.707f, -1.000f, 0.707f, 0.684f, -0.000f, 0.730f, 1.250f, 0.875f,
		0.707f, 1.000f, 0.707f, 0.684f, -0.000f, 0.730f, 1.250f, 0.125f,
		0.707f, -1.000f, 0.707f, 0.730f, -0.000f, 0.684f, 1.250f, 0.875f,
		0.752f, -1.000f, 0.659f, 0.730f, -0.000f, 0.684f, 1.122f, 0.875f,
		0.752f, 1.000f, 0.659f, 0.730f, -0.000f, 0.684f, 1.122f, 0.125f,
		0.752f, -1.000f, 0.659f, 0.773f, -0.000f, 0.634f, 1.122f, 0.875f,
		0.793f, -1.000f, 0.609f, 0.773f, -0.000f, 0.634f, 1.103f, 0.875f,
		0.793f, 1.000f, 0.609f, 0.773f, -0.000f, 0.634f, 1.103f, 0.125f,
		0.793f, -1.000f, 0.609f, 0.813f, -0.000f, 0.582f, 1.103f, 0.875f,
		0.831f, -1.000f, 0.556f, 0.813f, -0.000f, 0.582f, 1.083f, 0.875f,
		0.831f, 1.000f, 0.556f, 0.813f, -0.000f, 0.582f, 1.083f, 0.125f,
		0.831f, -1.000f, 0.556f, 0.849f, -0.000f, 0.528f, 1.083f, 0.875f,
		0.866f, -1.000f, 0.500f, 0.849f, -0.000f, 0.528f, 1.062f, 0.875f,
		0.866f, 1.000f, 0.500f, 0.849f, -0.000f, 0.528f, 1.062f, 0.125f,
		0.866f, -1.000f, 0.500f, 0.882f, -0.000f, 0.471f, 1.062f, 0.875f,
		0.897f, -1.000f, 0.442f, 0.882f, -0.000f, 0.471f, 1.041f, 0.875f,
		0.897f, 1.000f, 0.442f, 0.882f, -0.000f, 0.471f, 1.041f, 0.125f,
		0.897f, -1.000f, 0.442f, 0.911f, -0.000f, 0.413f, 1.041f, 0.875f,
		0.924f, -1.000f, 0.383f, 0.911f, -0.000f, 0.413f, 1.019f, 0.875f,
		0.924f, 1.000f, 0.383f, 0.911f, -0.000f, 0.413f, 1.019f, 0.125f,
		0.924f, -1.000f, 0.383f, 0.936f, -0.000f, 0.352f, 1.019f, 0.875f,
		0.947f, -1.000f, 0.321f, 0.936f, -0.000f, 0.352f, 0.996f, 0.875f,
		0.947f, 1.000f, 0.321f, 0.936f, -0.000f, 0.352f, 0.996f, 0.125f,
		0.947f, -1.000f, 0.321f, 0.957f, -0.000f, 0.290f, 0.996f, 0.875f,
		0.966f, -1.000f, 0.259f, 0.957f, -0.000f, 0.290f, 0.972f, 0.875f,
		0.966f, 1.000f, 0.259f, 0.957f, -0.000f, 0.290f, 0.972f, 0.125f,
		0.966f, -1.000f, 0.259f, 0.974f, -0.000f, 0.227f, 0.972f, 0.875f,
		0.981f, -1.000f, 0.195f, 0.974f, -0.000f, 0.227f, 0.948f, 0.875f,
		0.981f, 1.000f, 0.195f, 0.974f, -0.000f, 0.227f, 0.948f, 0.125f,
		0.981f, -1.000f, 0.195f, 0.987f, -0.000f, 0.163f, 0.948f, 0.875f,
		0.991f, -1.000f, 0.131f, 0.987f, -0.000f, 0.163f, 0.924f, 0.875f,
		0.991f, 1.000f, 0.131f, 0.987f, -0.000f, 0.163f, 0.924f, 0.125f,
		0.991f, -1.000f, 0.131f, 0.995f, -0.000f, 0.098f, 0.924f, 0.875f,
		0.998f, -1.000f, 0.065f, 0.995f, -0.000f, 0.098f, 0.900f, 0.875f,
		0.998f, 1.000f, 0.065f, 0.995f, -0.000f, 0.098f, 0.900f, 0.125f,
		0.998f, -1.000f, 0.065f, 0.999f, -0.000f, 0.033f, 0.900f, 0.875f,
		1.000f, -1.000f, 0.000f, 0.999f, -0.000f, 0.033f, 0.875f, 0.875f,
		1.000f, 1.000f, 0.000f, 0.999f, -0.000f, 0.033f, 0.875f, 0.125f,
		0.000f, -1.000f, -1.000f, -0.033f, -0.000f, -0.999f, 0.125f, 0.875f,
		-0.065f, -1.000f, -0.998f, -0.033f, -0.000f, -0.999f, 0.100f, 0.875f,
		-0.065f, 1.000f, -0.998f, -0.033f, -0.000f, -0.999f, 0.100f, 0.125f,
		-0.065f, -1.000f, -0.998f, -0.098f, -0.000f, -0.995f, 0.100f, 0.875f,
		-0.131f, -1.000f, -0.991f, -0.098f, -0.000f, -0.995f, 0.076f, 0.875f,
		-0.131f, 1.000f, -0.991f, -0.098f, -0.000f, -0.995f, 0.076f, 0.125f,
		-0.131f, -1.000f, -0.991f, -0.163f, -0.000f, -0.987f, 0.076f, 0.875f,
		-0.195f, -1.000f, -0.981f, -0.163f, -0.000f, -0.987f, 0.052f, 0.875f,
		-0.195f, 1.000f, -0.981f, -0.163f, -0.000f, -0.987f, 0.052f, 0.125f,
		-0.195f, -1.000f, -0.981f, -0.227f, -0.000f, -0.974f, 0.052f, 0.875f,
		-0.259f, -1.000f, -0.966f, -0.227f, -0.000f, -0.974f, 0.028f, 0.875f,
		-0.259f, 1.000f, -0.966f, -0.227f, -0.000f, -0.974f, 0.028f, 0.125f,
		-0.259f, -1.000f, -0.966f, -0.290f, -0.000f, -0.957f, 0.028f, 0.875f,
		-0.321f, -1.000f, -0.947f, -0.290f, -0.000f, -0.957f, 0.004f, 0.875f,
		-0.321f, 1.000f, -0.947f, -0.290f, -0.000f, -0.957f, 0.004f, 0.125f,
		-0.321f, -1.000f, -0.947f, -0.352f, -0.000f, -0.936f, 0.004f, 0.875f,
		-0.383f, -1.000f, -0.924f, -0.352f, -0.000f, -0.936f, -0.019f, 0.875f,
		-0.383f, 1.000f, -0.924f, -0.352f, -0.000f, -0.936f, -0.019f, 0.125f,
		-0.383f, -1.000f, -0.924f, -0.413f, -0.000f, -0.911f, -0.019f, 0.875f,
		-0.442f, -1.000f, -0.897f, -0.413f, -0.000f, -0.911f, -0.041f, 0.875f,
		-0.442f, 1.000f, -0.897f, -0.413f, -0.000f, -0.911f, -0.041f, 0.125f,
		-0.442f, -1.000f, -0.897f, -0.471f, -0.000f, -0.882f, -0.041f, 0.875f,
		-0.500f, -1.000f, -0.866f, -0.471f, -0.000f, -0.882f, -0.062f, 0.875f,
		-0.500f, 1.000f, -0.866f, -0.471f, -0.000f, -0.882f, -0.062f, 0.125f,
		-0.500f, -1.000f, -0.866f, -0.528f, -0.000f, -0.849f, -0.062f, 0.875f,
		-0.556f, -1.000f, -0.831f, -0.528f, -0.000f, -0.849f, -0.083f, 0.875f,
		-0.556f, 1.000f, -0.831f, -0.528f, -0.000f, -0.849f, -0.083f, 0.125f,
		-0.556f, -1.000f, -0.831f, -0.582f, -0.000f, -0.813f, -0.083f, 0.875f,
		-0.609f, -1.000f, -0.793f, -0.582f, -0.000f, -0.813f, -0.103f, 0.875f,
		-0.609f, 1.000f, -0.793f, -0.582f, -0.000f, -0.813f, -0.103f, 0.125f,
		-0.609f, -1.000f, -0.793f, -0.634f, -0.000f, -0.773f, -0.103f, 0.875f,
		-0.659f, -1.000f, -0.752f, -0.634f, -0.000f, -0.773f, -0.122f, 0.875f,
		-0.659f, 1.000f, -0.752f, -0.634f, -0.000f, -0.773f, -0.122f, 0.125f,
		-0.659f, -1.000f, -0.752f, -0.684f, -0.000f, -0.730f, -0.122f, 0.875f,
		-0.707f, -1.000f, -0.707f, -0.684f, -0.000f, -0.730f, -0.250f, 0.875f,
		-0.707f, 1.000f, -0.707f, -0.684f, -0.000f, -0.730f, -0.250f, 0.125f,
		-0.707f, -1.000f, -0.707f, -0.730f, -0.000f, -0.684f, -0.250f, 0.875f,
		-0.752f, -1.000f, -0.659f, -0.730f, -0.000f, -0.684f, -0.378f, 0.875f,
		-0.752f, 1.000f, -0.659f, -0.730f, -0.000f, -0.684f, -0.378f, 0.125f,
		-0.752f, -1.000f, -0.659f, -0.773f, -0.000f, -0.634f, -0.378f, 0.875f,
		-0.793f, -1.000f, -0.609f, -0.773f, -0.000f, -0.634f, -0.397f, 0.875f,
		-0.793f, 1.000f, -0.609f, -0.773f, -0.000f, -0.634f, -0.397f, 0.125f,
		-0.793f, -1.000f, -0.609f, -0.813f, -0.000f, -0.582f, -0.397f, 0.875f,
		-0.831f, -1.000f, -0.556f, -0.813f, -0.000f, -0.582f, -0.417f, 0.875f,
		-0.831f, 1.000f, -0.556f, -0.813f, -0.000f, -0.582f, -0.417f, 0.125f,
		-0.831f, -1.000f, -0.556f, -0.849f, -0.000f, -0.528f, -0.417f, 0.875f,
		-0.866f, -1.000f, -0.500f, -0.849f, -0.000f, -0.528f, -0.438f, 0.875f,
		-0.866f, 1.000f, -0.500f, -0.849f, -0.000f, -0.528f, -0.438f, 0.125f,
		-0.866f, -1.000f, -0.500f, -0.882f, -0.000f, -0.471f, -0.438f, 0.875f,
		-0.897f, -1.000f, -0.442f, -0.882f, -0.000f, -0.471f, -0.459f, 0.875f,
		-0.897f, 1.000f, -0.442f, -0.882f, -0.000f, -0.471f, -0.459f, 0.125f,
		-0.897f, -1.000f, -0.442f, -0.911f, -0.000f, -0.413f, -0.459f, 0.875f,
		-0.924f, -1.000f, -0.383f, -0.911f, -0.000f, -0.413f, -0.481f, 0.875f,
		-0.924f, 1.000f, -0.383f, -0.911f, -0.000f, -0.413f, -0.481f, 0.125f,
		-0.924f, -1.000f, -0.383f, -0.936f, -0.000f, -0.352f, -0.481f, 0.875f,
		-0.947f, -1.000f, -0.321f, -0.936f, -0.000f, -0.352f, -0.504f, 0.875f,
		-0.947f, 1.000f, -0.321f, -0.936f, -0.000f, -0.352f, -0.504f, 0.125f,
		-0.947f, -1.000f, -0.321f, -0.957f, -0.000f, -0.290f, -0.504f, 0.875f,
		-0.966f, -1.000f, -0.259f, -0.957f, -0.000f, -0.290f, -0.528f, 0.875f,
		-0.966f, 1.000f, -0.259f, -0.957f, -0.000f, -0.290f, -0.528f, 0.125f,
		-0.966f, -1.000f, -0.259f, -0.974f, -0.000f, -0.227f, -0.528f, 0.875f,
		-0.981f, -1.000f, -0.195f, -0.974f, -0.000f, -0.227f, -0.552f, 0.875f,
		-0.981f, 1.000f, -0.195f, -0.974f, -0.000f, -0.227f, -0.552f, 0.125f,
		-0.981f, -1.000f, -0.195f, -0.987f, -0.000f, -0.163f, -0.552f, 0.875f,
		-0.991f, -1.000f, -0.131f, -0.987f, -0.000f, -0.163f, -0.576f, 0.875f,
		-0.991f, 1.000f, -0.131f, -0.987f, -0.000f, -0.163f, -0.576f, 0.125f,
		-0.991f, -1.000f, -0.131f, -0.995f, -0.000f, -0.098f, -0.576f, 0.875f,
		-0.998f, -1.000f, -0.065f, -0.995f, -0.000f, -0.098f, -0.600f, 0.875f,
		-0.998f, 1.000f, -0.065f, -0.995f, -0.000f, -0.098f, -0.600f, 0.125f,
		-0.998f, -1.000f, -0.065f, -0.999f, -0.000f, -0.033f, -0.600f, 0.875f,
		-1.000f, -1.000f, 0.000f, -0.999f, -0.000f, -0.033f, -0.625f, 0.875f,
		-1.000f, 1.000f, 0.000f, -0.999f, -0.000f, -0.033f, -0.625f, 0.125f,

	};


	//The viewpoint goes from x = 0, y = 0, to x = 800, y = 600
	glViewport(0, 0, WIDTH, HEIGHT);

	// Vertex Array Object, Vertex Buffer Object, Element Array Object
	// VAO must be generated befor the VBO
	//In this example I am making two objects, one for each triangle
	GLuint VAOs[5], VBOs[5], EBOs[5];
	glGenVertexArrays(5, VAOs);
	glGenBuffers(5, VBOs);
	glGenBuffers(5, EBOs);

	//______________________________________________________________________________________________________________________________
	//Rubik's Cube container setup
	glBindVertexArray(VAOs[0]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[0]);

	//Stores vertices in VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVertices), cubeVertices, GL_STATIC_DRAW);

	//configures so the OpenGl knows how to use the VBO, position attributes
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	//Normals attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	//texture attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);
	//________________________________________________________________________________________________________________________________
	//Countertop container setup
	glBindVertexArray(VAOs[1]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[1]);

	//Stores vertices in VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(tableVertices), tableVertices, GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBOs[1]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(tableIndices), tableIndices, GL_STATIC_DRAW);

	//configures so the OpenGl knows how to use the VBO, position attributes
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	//Normals attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	//texture attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);

	//______________________________________________________________________________________________________________
		//Computer container setup
	glBindVertexArray(VAOs[2]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[2]);

	//Stores vertices in VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(computerVertices), computerVertices, GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBOs[2]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(computerIndices), computerIndices, GL_STATIC_DRAW);

	//configures so the OpenGl knows how to use the VBO, position attributes
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	//Normals attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	//texture attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);
	//___________________________________________________________________________________________________________________
	//Mug container setup
	glBindVertexArray(VAOs[3]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[3]);

	//Stores vertices in VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(mugVertices), mugVertices, GL_STATIC_DRAW);

	//configures so the OpenGl knows how to use the VBO, position attributes
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	//Normals attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	//texture attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);

//___________________________________________________________________________________________________________________
	//Pyramid container setup
	glBindVertexArray(VAOs[4]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[4]);

	//Stores vertices in VBO
	glBufferData(GL_ARRAY_BUFFER, sizeof(pyramidVertices), pyramidVertices, GL_STATIC_DRAW);

	//Draw Element Array Buffer
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBOs[4]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(pyramidIndices), pyramidIndices, GL_STATIC_DRAW);

	//configures so the OpenGl knows how to use the VBO, position attributes
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(0);

	//Normals attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);

	//texture attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);

	unsigned int texture1, texture2, texture3, texture4, texture5, texture6, texture7;

	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +    Rubik's Cube Texture    +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture1);
	glBindTexture(GL_TEXTURE_2D, texture1);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps
	int width, height, nrChannels;
	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data = stbi_load("Cube2.jpg", &width, &height, &nrChannels, 0);
	if (data)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data);

	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +     Countertop Texture     +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture2);
	glBindTexture(GL_TEXTURE_2D, texture2);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps

	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data2 = stbi_load("Granite.jpg", &width, &height, &nrChannels, 0);
	if (data2)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data2);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data2);

	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +     Keyboard Texture       +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture3);
	glBindTexture(GL_TEXTURE_2D, texture3);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps

	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data3 = stbi_load("Keyboard.jpg", &width, &height, &nrChannels, 0);
	if (data3)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data3);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data3);

	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +  Computer Screen Texture   +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture4);
	glBindTexture(GL_TEXTURE_2D, texture4);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps

	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data4 = stbi_load("Screen2.jpg", &width, &height, &nrChannels, 0);
	if (data4)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data4);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data4);

	//  ++++++++++++++++++++++++++++++
	//  +                            +
	//  +       Cover Texture        +
	//	+                            +
	//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture5);
	glBindTexture(GL_TEXTURE_2D, texture5);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps

	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data5 = stbi_load("computerBack.jpg", &width, &height, &nrChannels, 0);
	if (data5)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data5);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data5);

//  ++++++++++++++++++++++++++++++
//  +                            +
//  +		Mug Texture			 +
//	+                            +
//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture6);
	glBindTexture(GL_TEXTURE_2D, texture6);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	// load image, create texture and generate mipmaps

	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data6 = stbi_load("mug.jpg", &width, &height, &nrChannels, 0);
	if (data6)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data6);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data6);

	//  ++++++++++++++++++++++++++++++
//  +                            +
//  +       Cover Texture        +
//	+                            +
//  ++++++++++++++++++++++++++++++
	glGenTextures(1, &texture7);
	glBindTexture(GL_TEXTURE_2D, texture7);
	// set the texture wrapping parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// set texture filtering parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	// load image, create texture and generate mipmaps

	stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
	unsigned char* data7 = stbi_load("Brick.jpg", &width, &height, &nrChannels, 0);
	if (data7)
	{
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data7);
		glGenerateMipmap(GL_TEXTURE_2D);
	}
	else
	{
		std::cout << "Failed to load texture" << std::endl;
	}
	stbi_image_free(data7);

	// tell opengl for each sampler to which texture unit it belongs to (only has to be done once)
	// -------------------------------------------------------------------------------------------
	// be sure to activate shader when setting uniforms/drawing objects

	//A loop so that the window won't be terminated immediately
	while (!glfwWindowShouldClose(window))
	{
		// per-frame time logic
		float currentFrame = static_cast<float>(glfwGetTime());
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		//Calls the keyboard commands below
		processInput(window);

		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

		//swapped to Depth and color to prevent any issues with glClear
		glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

		//activates shader when setting uniforms/drawing objects
		lightingShader.use();
		lightingShader.setVec3("viewPos", camera.Position);
		lightingShader.setFloat("material.shininess", 2.0f);


		// Fixed light 1
		lightingShader.setVec3("pointLights[0].position", pointLightPositions[0].x, pointLightPositions[0].y, pointLightPositions[0].z);
		lightingShader.setVec3("pointLights[0].ambient", pointLightColors[0].x * 1.0, pointLightColors[0].y * 1.0, pointLightColors[0].z * 1.0); //sets color intensity to 100%
		lightingShader.setVec3("pointLights[0].diffuse", pointLightColors[0].x, pointLightColors[0].y, pointLightColors[0].z);
		lightingShader.setVec3("pointLights[0].specular", pointLightColors[0].x, pointLightColors[0].y, pointLightColors[0].z);
		lightingShader.setFloat("pointLights[0].constant", 1.0f);
		lightingShader.setFloat("pointLights[0].linear", 0.09f);
		lightingShader.setFloat("pointLights[0].quadratic", 0.032f);

		// Fix light 2
		lightingShader.setVec3("pointLights[1].position", pointLightPositions[1].x, pointLightPositions[1].y, pointLightPositions[1].z);
		lightingShader.setVec3("pointLights[1].ambient", pointLightColors[1].x * 0.1, pointLightColors[1].y * 0.1, pointLightColors[1].z * 0.1); //sets color intesity to 10%
		lightingShader.setVec3("pointLights[1].diffuse", pointLightColors[1].x, pointLightColors[1].y, pointLightColors[1].z);
		lightingShader.setVec3("pointLights[1].specular", pointLightColors[1].x, pointLightColors[1].y, pointLightColors[1].z);
		lightingShader.setFloat("pointLights[1].constant", 1.0f);
		lightingShader.setFloat("pointLights[1].linear", 0.09f);
		lightingShader.setFloat("pointLights[1].quadratic", 0.032f);
		std::cout << glGetError() << std::endl; // returns 0 (no error)

		// Fixed light 3
		lightingShader.setVec3("pointLights[2].position", pointLightPositions[2].x, pointLightPositions[0].y, pointLightPositions[0].z);
		lightingShader.setVec3("pointLights[2].ambient", pointLightColors[2].x * 0.1, pointLightColors[0].y * 0.1, pointLightColors[0].z * 0.1); //sets color intensity to 10%
		lightingShader.setVec3("pointLights[2].diffuse", pointLightColors[2].x, pointLightColors[0].y, pointLightColors[0].z);
		lightingShader.setVec3("pointLights[2].specular", pointLightColors[2].x, pointLightColors[0].y, pointLightColors[0].z);
		lightingShader.setFloat("pointLights[2].constant", 1.0f);
		lightingShader.setFloat("pointLights[2].linear", 0.09f);
		lightingShader.setFloat("pointLights[2].quadratic", 0.032f);

		// Fixed light 4
		lightingShader.setVec3("pointLights[3].position", pointLightPositions[3].x, pointLightPositions[1].y, pointLightPositions[1].z);
		lightingShader.setVec3("pointLights[3].ambient", pointLightColors[3].x * 1.0, pointLightColors[1].y * 1.0, pointLightColors[1].z * 1.0); //sets color intesity to 100%
		lightingShader.setVec3("pointLights[3].diffuse", pointLightColors[3].x, pointLightColors[1].y, pointLightColors[1].z);
		lightingShader.setVec3("pointLights[3].specular", pointLightColors[3].x, pointLightColors[1].y, pointLightColors[1].z);
		lightingShader.setFloat("pointLights[3].constant", 1.0f);
		lightingShader.setFloat("pointLights[3].linear", 0.09f);
		lightingShader.setFloat("pointLights[3].quadratic", 0.032f);
		std::cout << glGetError() << std::endl; // returns 0 (no error)

		//initializes a projection matrix (needed to be added after moving projectiosn to if statement
		glm::mat4 projection;

		// pass projection matrix to shader (note that in this case it could change every frame)
		//Referenced from https://stackoverflow.com/questions/44710262/opengl-switching-between-ortho-and-perspecive-problems
		if (!perspective)
		{
			//orth perspective
			projection = glm::ortho(-2.0f, 2.0f, -2.0f, 2.0f, 0.1f, 100.0f);
		}
		//projection perspective
		else
			projection = glm::perspective(glm::radians(camera.Zoom), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

		// camera/view transformation
		glm::mat4 view = camera.GetViewMatrix();
		lightingShader.setMat4("view", view);
		lightingShader.setMat4("projection", projection);

		std::cout << glGetError() << std::endl; // returns 0 (no error)

		//  ++++++++++++++++++++++++++++++
		//  +                            +
		//  +     Ribik's Cube Draw      +
		//	+                            +
		//  ++++++++++++++++++++++++++++++

		glBindVertexArray(VAOs[0]);

		for (unsigned int i = 0; i < 1; i++)
		{
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture1);

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(-3.5f, -4.7f, -13.0f));

			//Rotates the objects over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(100.0f), glm::vec3(0.0, 1.0f, 0.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));

			//Adds lighting shader to the 3D model
			lightingShader.setMat4("model", model);

			//Draws the cube using the Draw Array
			glDrawArrays(GL_TRIANGLES, 0, 36);
		}
		std::cout << glGetError() << std::endl;

		//  ++++++++++++++++++++++++++++++
		//  +                            +
		//  +      Countertop Draw       +
		//	+                            +
		//  ++++++++++++++++++++++++++++++

		glBindVertexArray(VAOs[1]);

		for (unsigned int i = 0; i < 1; i++)

		{
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture2);

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(0.0f, -0.3f, -13.0f));

			//Rotates the objects over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(0.0f), glm::vec3(1.0, 0.0f, 0.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(6.0f, 5.0f, 3.0f));

			//Adds lighting shader to the 3D model
			lightingShader.setMat4("model", model);

			//draws the triangles
			glDrawElements(GL_TRIANGLES, sizeof(tableIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		}
		std::cout << glGetError() << std::endl;

		/// ++++++++++++++++++++++++++++++
		//  +                            +
		//  +        Keyboard Draw       +
		//	+                            +
		//  ++++++++++++++++++++++++++++++

		glBindVertexArray(VAOs[2]);

		for (unsigned int i = 0; i < 1; i++)

		{
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture3); //keyboard

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(1.0f, -5.25f, -13.5f));

			//Rotates the objects over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(-90.0f), glm::vec3(1.0, 0.0f, 0.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(6.0f, 5.0f, 5.0f));

			//Adds lighting shader to the 3D model
			lightingShader.setMat4("model", model);

			//draws the triangles
			glDrawElements(GL_TRIANGLES, sizeof(computerIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		}
		std::cout << glGetError() << std::endl;

		//  ++++++++++++++++++++++++++++++
		//  +                            +
		//  +        Screen Draw         +
		//	+                            +
		//  ++++++++++++++++++++++++++++++

		for (unsigned int i = 0; i < 1; i++)

		{
			//Overlays two textures on a single surface
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture4); //screen picture
			bool multipleTextures = false;

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(1.0f, -3.5f, -17.75f));

			//Rotates the objects over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(-45.0f), glm::vec3(1.0, 0.0f, 0.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(6.0f, 5.0f, 5.0f));

			//Adds lighting shader to the 3D model
			lightingShader.setMat4("model", model);

			//draws the triangles using the Elemental buffer
			glDrawElements(GL_TRIANGLES, sizeof(computerIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		}
		std::cout << glGetError() << std::endl;

		//  ++++++++++++++++++++++++++++++
		//  +                            +
		//  +         Cover Draw         +
		//	+                            +
		//  ++++++++++++++++++++++++++++++

		for (unsigned int i = 0; i < 1; i++)

		{
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture5); //Computer Screen back

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(1.0f, -3.5f, -17.76f));

			//Rotates and flips the object over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(-45.0f), glm::vec3(1.0, 0.0f, 0.0f));
			model = glm::rotate(model, glm::radians(180.0f), glm::vec3(0.0, 1.0f, 0.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(6.0f, 5.0f, 5.0f));

			//Adds lighting shader to the 3D model
			lightingShader.setMat4("model", model);

			//draws the triangles using the Elemental buffer
			glDrawElements(GL_TRIANGLES, sizeof(computerIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		}
		std::cout << glGetError() << std::endl;


		//  ++++++++++++++++++++++++++++++
		//  +                            +
		//  +         Mug Draw           +
		//	+                            +
		//  ++++++++++++++++++++++++++++++

		glBindVertexArray(VAOs[3]);

		for (unsigned int i = 0; i < 1; i++)
		{
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture6);

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(6.0f, -4.29f, -13.0f));

			//Rotates the objects over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(180.0f), glm::vec3(1.0, 0.0f, 0.0f));
			model = glm::rotate(model, glm::radians(60.0f), glm::vec3(0.0, 1.0f, 0.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));

			//Adds lighting shader to the 3D model
			lightingShader.setMat4("model", model);

			//Draws the cube using the Draw Array
			glDrawArrays(GL_TRIANGLES, 0, 1141);
		}
		std::cout << glGetError() << std::endl;

		glBindVertexArray(VAOs[4]);
		//_________________________________
		//								  -    
		//    Render the Pyramid          -
		//_________________________________
		for (unsigned int i = 0; i < 1; i++)
		{
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture7);

			//initializes matrix to identity matrix
			glm::mat4 model = glm::mat4(1.0f);

			//moves the 3D object around the world
			model = glm::translate(model, glm::vec3(-1.0f, -5.25f, -12.0f));

			//Rotates the objects over the degees and x, y, z axis
			model = glm::rotate(model, glm::radians(1.0f), glm::vec3(1.0, 0.0f, 0.0f));
			model = glm::rotate(model, glm::radians(1.0f), glm::vec3(0.0, 1.0f, 0.0f));
			model = glm::rotate(model, glm::radians(1.0f), glm::vec3(0.0, 0.0f, 1.0f));

			//changes the size of the object
			model = glm::scale(model, glm::vec3(1.0f, 1.0f, 1.0f));

			lightingShader.setMat4("model", model);

			//draws the triangles
			glDrawElements(GL_TRIANGLES, sizeof(pyramidIndices) / sizeof(int), GL_UNSIGNED_INT, 0);
		}

		glfwSwapBuffers(window);

		//processes all GLFW events other than closing
		glfwPollEvents();
	}

	//De-allocates resources
	glDeleteVertexArrays(5, VAOs);
	glDeleteBuffers(5, VBOs);
	glDeleteBuffers(5, EBOs);

	glfwDestroyWindow(window); //Terminates the window
	glfwTerminate(); //Terminates GLFW
	return 0;
}

void processInput(GLFWwindow* window)
{
	//Controls ability to ecape the window
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	//Controls camera movement
	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		camera.ProcessKeyboard(FORWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		camera.ProcessKeyboard(BACKWARD, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		camera.ProcessKeyboard(LEFT, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		camera.ProcessKeyboard(RIGHT, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS)
		camera.ProcessKeyboard(UP, deltaTime);
	if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS)
		camera.ProcessKeyboard(DOWN, deltaTime);

	//changes camera perspective
	if (glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS)
		perspective = false;

	else
		perspective = true;
}

// This method handles the resize of the window
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}

void mouse_callback(GLFWwindow* window, double xposIn, double yposIn)
{
	float xpos = static_cast<float>(xposIn);
	float ypos = static_cast<float>(yposIn);

	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top

	lastX = xpos;
	lastY = ypos;

	camera.ProcessMouseMovement(xoffset, yoffset);
}

// Whenever the mouse scroll wheel scrolls, this callback is called
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	camera.ProcessMouseScroll(static_cast<float>(yoffset));
}

